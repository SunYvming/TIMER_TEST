
TIMER_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004090  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08004374  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004374  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efec  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a2  00000000  00000000  0002f08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00031330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00032028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022747  00000000  00000000  00032bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af78  00000000  00000000  0005533f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cae13  00000000  00000000  000602b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b0ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a48  00000000  00000000  0012b148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004200 	.word	0x08004200

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004200 	.word	0x08004200

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <KeyControlInit>:
	函数作用: 初始化按键控制参数
*/

// Function body
void KeyControlInit()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	old_tick=HAL_GetTick();
 80004cc:	f000 fd2a 	bl	8000f24 <HAL_GetTick>
 80004d0:	4603      	mov	r3, r0
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <KeyControlInit+0x14>)
 80004d6:	701a      	strb	r2, [r3, #0]
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000008c 	.word	0x2000008c

080004e0 <KeyControl>:
	函数作用: 阻塞式、非阻塞式 按键控制KEY_1
*/

// Function body
void KeyControl()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
#if WORK_MODE ==0 //阻塞式
	if(HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)==KEY_PRESS)
 80004e4:	2110      	movs	r1, #16
 80004e6:	4810      	ldr	r0, [pc, #64]	; (8000528 <KeyControl+0x48>)
 80004e8:	f001 f818 	bl	800151c <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d117      	bne.n	8000522 <KeyControl+0x42>
	{
		HAL_Delay(10);
 80004f2:	200a      	movs	r0, #10
 80004f4:	f000 fd22 	bl	8000f3c <HAL_Delay>
		if(HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)==KEY_PRESS)
 80004f8:	2110      	movs	r1, #16
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <KeyControl+0x48>)
 80004fc:	f001 f80e 	bl	800151c <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d10d      	bne.n	8000522 <KeyControl+0x42>
		{
			while(HAL_GPIO_ReadPin(KEY_1_GPIO_Port, KEY_1_Pin)==KEY_PRESS);
 8000506:	bf00      	nop
 8000508:	2110      	movs	r1, #16
 800050a:	4807      	ldr	r0, [pc, #28]	; (8000528 <KeyControl+0x48>)
 800050c:	f001 f806 	bl	800151c <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f8      	beq.n	8000508 <KeyControl+0x28>
			LED1_TOGGLE;
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <KeyControl+0x4c>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a04      	ldr	r2, [pc, #16]	; (800052c <KeyControl+0x4c>)
 800051c:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8000520:	6153      	str	r3, [r2, #20]
			}
		}
		else if(status==2)	status=0;
	}
#endif
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40021400 	.word	0x40021400

08000530 <IRQKeyControl>:
	函数作用: 中断方式按键控制
*/

// Function body
void IRQKeyControl()
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Stop_IT(&htim6);
	LED2_TOGGLE;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <IRQKeyControl+0x1c>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <IRQKeyControl+0x1c>)
 800053a:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 800053e:	6153      	str	r3, [r2, #20]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021400 	.word	0x40021400

08000550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <MX_GPIO_Init+0x114>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a3d      	ldr	r2, [pc, #244]	; (8000664 <MX_GPIO_Init+0x114>)
 8000570:	f043 0310 	orr.w	r3, r3, #16
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b3b      	ldr	r3, [pc, #236]	; (8000664 <MX_GPIO_Init+0x114>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b37      	ldr	r3, [pc, #220]	; (8000664 <MX_GPIO_Init+0x114>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a36      	ldr	r2, [pc, #216]	; (8000664 <MX_GPIO_Init+0x114>)
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b34      	ldr	r3, [pc, #208]	; (8000664 <MX_GPIO_Init+0x114>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b30      	ldr	r3, [pc, #192]	; (8000664 <MX_GPIO_Init+0x114>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a2f      	ldr	r2, [pc, #188]	; (8000664 <MX_GPIO_Init+0x114>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_GPIO_Init+0x114>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_GPIO_Init+0x114>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a28      	ldr	r2, [pc, #160]	; (8000664 <MX_GPIO_Init+0x114>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_GPIO_Init+0x114>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b22      	ldr	r3, [pc, #136]	; (8000664 <MX_GPIO_Init+0x114>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a21      	ldr	r2, [pc, #132]	; (8000664 <MX_GPIO_Init+0x114>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_GPIO_Init+0x114>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	481b      	ldr	r0, [pc, #108]	; (8000668 <MX_GPIO_Init+0x118>)
 80005fa:	f000 ffa7 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_2_Pin;
 80005fe:	2308      	movs	r3, #8
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_GPIO_Init+0x11c>)
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000606:	2301      	movs	r3, #1
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4817      	ldr	r0, [pc, #92]	; (8000670 <MX_GPIO_Init+0x120>)
 8000612:	f000 fde9 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000616:	2310      	movs	r3, #16
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <MX_GPIO_Init+0x120>)
 800062a:	f000 fddd 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 800062e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <MX_GPIO_Init+0x118>)
 8000648:	f000 fdce 	bl	80011e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2009      	movs	r0, #9
 8000652:	f000 fd70 	bl	8001136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000656:	2009      	movs	r0, #9
 8000658:	f000 fd89 	bl	800116e <HAL_NVIC_EnableIRQ>

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40021400 	.word	0x40021400
 800066c:	10210000 	.word	0x10210000
 8000670:	40021000 	.word	0x40021000

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fbed 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f853 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff ff65 	bl	8000550 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000686:	f000 fb43 	bl	8000d10 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800068a:	f000 fa2b 	bl	8000ae4 <MX_TIM6_Init>
  MX_TIM14_Init();
 800068e:	f000 fa5f 	bl	8000b50 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  printf("串口发送正常\r\n");
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <main+0x9c>)
 8000694:	f003 f9a8 	bl	80039e8 <puts>
  HAL_Delay(500);
 8000698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069c:	f000 fc4e 	bl	8000f3c <HAL_Delay>
  printf("串口发送正常\r\n");
 80006a0:	481b      	ldr	r0, [pc, #108]	; (8000710 <main+0x9c>)
 80006a2:	f003 f9a1 	bl	80039e8 <puts>
  HAL_Delay(500);
 80006a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006aa:	f000 fc47 	bl	8000f3c <HAL_Delay>
  printf("串口发送正常\r\n");
 80006ae:	4818      	ldr	r0, [pc, #96]	; (8000710 <main+0x9c>)
 80006b0:	f003 f99a 	bl	80039e8 <puts>

  HAL_UART_Receive_IT(&huart1, &receive_char, 1);
 80006b4:	2201      	movs	r2, #1
 80006b6:	4917      	ldr	r1, [pc, #92]	; (8000714 <main+0xa0>)
 80006b8:	4817      	ldr	r0, [pc, #92]	; (8000718 <main+0xa4>)
 80006ba:	f002 fab5 	bl	8002c28 <HAL_UART_Receive_IT>


  KeyControlInit();
 80006be:	f7ff ff03 	bl	80004c8 <KeyControlInit>


  //需要tim的哪个功能就使能哪个就行了，不需要使能没用上的
  HAL_TIM_Base_Start_IT(&htim6);
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <main+0xa8>)
 80006c4:	f001 fbe7 	bl	8001e96 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim14);	//使能tim14的定时器中断功能
  HAL_TIM_PWM_Start_IT(&htim14, TIM_CHANNEL_1);
 80006c8:	2100      	movs	r1, #0
 80006ca:	4815      	ldr	r0, [pc, #84]	; (8000720 <main+0xac>)
 80006cc:	f001 fc3c 	bl	8001f48 <HAL_TIM_PWM_Start_IT>
  //HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);//使能tim14 ch1 pwm调波功能

  uint16_t dutycycle=0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	80fb      	strh	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	KeyControl();
 80006d4:	f7ff ff04 	bl	80004e0 <KeyControl>

	//led呼吸灯效果（控制pwm调波占空比）
	while(dutycycle<1000)
 80006d8:	e008      	b.n	80006ec <main+0x78>
		{
			dutycycle++;
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	3301      	adds	r3, #1
 80006de:	80fb      	strh	r3, [r7, #6]
			//__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,dutycycle); //库操作方式
			TIM14->CCR1 = dutycycle;         //寄存器操作方式
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <main+0xb0>)
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fc28 	bl	8000f3c <HAL_Delay>
	while(dutycycle<1000)
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006f2:	d3f2      	bcc.n	80006da <main+0x66>
		}
		while(dutycycle)
 80006f4:	e008      	b.n	8000708 <main+0x94>
		{
			dutycycle--;
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	80fb      	strh	r3, [r7, #6]
			//__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,dutycycle); //库操作方式
			TIM14->CCR1 = dutycycle;         //寄存器操作方式
 80006fc:	4a09      	ldr	r2, [pc, #36]	; (8000724 <main+0xb0>)
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fc1a 	bl	8000f3c <HAL_Delay>
		while(dutycycle)
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f3      	bne.n	80006f6 <main+0x82>
	KeyControl();
 800070e:	e7e1      	b.n	80006d4 <main+0x60>
 8000710:	08004218 	.word	0x08004218
 8000714:	200000a0 	.word	0x200000a0
 8000718:	20000124 	.word	0x20000124
 800071c:	200000a4 	.word	0x200000a4
 8000720:	200000e4 	.word	0x200000e4
 8000724:	40002000 	.word	0x40002000

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 f8f2 	bl	8003920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a27      	ldr	r2, [pc, #156]	; (80007f4 <SystemClock_Config+0xcc>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd0>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800079c:	23a8      	movs	r3, #168	; 0xa8
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 ff0b 	bl	80015c8 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b8:	f000 f842 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2105      	movs	r1, #5
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 f964 	bl	8001aa8 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007e6:	f000 f82b 	bl	8000840 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <HAL_UART_RxCpltCallback+0x38>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d10e      	bne.n	800082c <HAL_UART_RxCpltCallback+0x30>
	{

		/*接收数据的处理*/

		//原封不动的回传
		HAL_UART_Transmit(&huart1, &receive_char, 1, 0xff);
 800080e:	23ff      	movs	r3, #255	; 0xff
 8000810:	2201      	movs	r2, #1
 8000812:	4909      	ldr	r1, [pc, #36]	; (8000838 <HAL_UART_RxCpltCallback+0x3c>)
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <HAL_UART_RxCpltCallback+0x40>)
 8000816:	f002 f96e 	bl	8002af6 <HAL_UART_Transmit>

		//-----------------------------------

		while(HAL_UART_Receive_IT(&huart1, &receive_char, 1)!=HAL_OK);
 800081a:	bf00      	nop
 800081c:	2201      	movs	r2, #1
 800081e:	4906      	ldr	r1, [pc, #24]	; (8000838 <HAL_UART_RxCpltCallback+0x3c>)
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <HAL_UART_RxCpltCallback+0x40>)
 8000822:	f002 fa01 	bl	8002c28 <HAL_UART_Receive_IT>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f7      	bne.n	800081c <HAL_UART_RxCpltCallback+0x20>
	}
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40011000 	.word	0x40011000
 8000838:	200000a0 	.word	0x200000a0
 800083c:	20000124 	.word	0x20000124

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000846:	e7fe      	b.n	8000846 <Error_Handler+0x6>

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 fb0a 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80008f0:	2008      	movs	r0, #8
 80008f2:	f000 fe45 	bl	8001580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  IRQKeyControl();
 80008f6:	f7ff fe1b 	bl	8000530 <IRQKeyControl>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <USART1_IRQHandler+0x10>)
 8000906:	f002 f9e5 	bl	8002cd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000124 	.word	0x20000124

08000914 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
  static uint32_t count=0;
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 800091a:	f001 fb99 	bl	8002050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
  if (count<41999)
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f24a 420e 	movw	r2, #41998	; 0xa40e
 8000926:	4293      	cmp	r3, r2
 8000928:	d805      	bhi.n	8000936 <TIM8_TRG_COM_TIM14_IRQHandler+0x22>
	count++;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 8000932:	6013      	str	r3, [r2, #0]
	count=0;
	printf("TIM14 (500/42000)ms 定时器第42000次触发\r\n");
  }

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000934:	e005      	b.n	8000942 <TIM8_TRG_COM_TIM14_IRQHandler+0x2e>
	count=0;
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
	printf("TIM14 (500/42000)ms 定时器第42000次触发\r\n");
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>)
 800093e:	f003 f853 	bl	80039e8 <puts>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000e4 	.word	0x200000e4
 800094c:	20000090 	.word	0x20000090
 8000950:	0800422c 	.word	0x0800422c

08000954 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <TIM6_DAC_IRQHandler+0x14>)
 800095a:	f001 fb79 	bl	8002050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  printf("TIM6 500ms 定时器触发\r\n");
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <TIM6_DAC_IRQHandler+0x18>)
 8000960:	f003 f842 	bl	80039e8 <puts>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000a4 	.word	0x200000a4
 800096c:	0800425c 	.word	0x0800425c

08000970 <_read>:
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f991 	bl	8000cec <__io_putchar>
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	2301      	movs	r3, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
 8000a7c:	f002 ff26 	bl	80038cc <__errno>
 8000a80:	4602      	mov	r2, r0
 8000a82:	230c      	movs	r3, #12
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20020000 	.word	0x20020000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000094 	.word	0x20000094
 8000ab4:	20000170 	.word	0x20000170

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <SystemInit+0x28>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <SystemInit+0x28>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SystemInit+0x28>)
 8000ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM6_Init+0x64>)
 8000af4:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <MX_TIM6_Init+0x68>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41999;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_TIM6_Init+0x64>)
 8000afa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000afe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_TIM6_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_TIM6_Init+0x64>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_TIM6_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_TIM6_Init+0x64>)
 8000b16:	f001 f993 	bl	8001e40 <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b20:	f7ff fe8e 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_TIM6_Init+0x64>)
 8000b32:	f001 ff03 	bl	800293c <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f7ff fe80 	bl	8000840 <Error_Handler>
  }

}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000a4 	.word	0x200000a4
 8000b4c:	40001000 	.word	0x40001000

08000b50 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <MX_TIM14_Init+0x98>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b8e:	4815      	ldr	r0, [pc, #84]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000b90:	f001 f956 	bl	8001e40 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000b9a:	f7ff fe51 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000ba0:	f001 f99d 	bl	8001ede <HAL_TIM_PWM_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000baa:	f7ff fe49 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bae:	2360      	movs	r3, #96	; 0x60
 8000bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 8000bb2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000bb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000bc8:	f001 fb4a 	bl	8002260 <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000bd2:	f7ff fe35 	bl	8000840 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <MX_TIM14_Init+0x94>)
 8000bd8:	f000 f84e 	bl	8000c78 <HAL_TIM_MspPostInit>

}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000e4 	.word	0x200000e4
 8000be8:	40002000 	.word	0x40002000

08000bec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <HAL_TIM_Base_MspInit+0x80>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d116      	bne.n	8000c2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_TIM_Base_MspInit+0x84>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <HAL_TIM_Base_MspInit+0x84>)
 8000c08:	f043 0310 	orr.w	r3, r3, #16
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_TIM_Base_MspInit+0x84>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2036      	movs	r0, #54	; 0x36
 8000c20:	f000 fa89 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c24:	2036      	movs	r0, #54	; 0x36
 8000c26:	f000 faa2 	bl	800116e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000c2a:	e01a      	b.n	8000c62 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM14)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_TIM_Base_MspInit+0x88>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d115      	bne.n	8000c62 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_TIM_Base_MspInit+0x84>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <HAL_TIM_Base_MspInit+0x84>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_TIM_Base_MspInit+0x84>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	202d      	movs	r0, #45	; 0x2d
 8000c58:	f000 fa6d 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000c5c:	202d      	movs	r0, #45	; 0x2d
 8000c5e:	f000 fa86 	bl	800116e <HAL_NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40001000 	.word	0x40001000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40002000 	.word	0x40002000

08000c78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM14)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <HAL_TIM_MspPostInit+0x68>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d11e      	bne.n	8000cd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = LED_1_Pin;
 8000cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000cc8:	2309      	movs	r3, #9
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_TIM_MspPostInit+0x70>)
 8000cd4:	f000 fa88 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40002000 	.word	0x40002000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40021400 	.word	0x40021400

08000cec <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  //具体哪个串口可以更改huart1为其它串口
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1,0xffff);
 8000cf4:	1d39      	adds	r1, r7, #4
 8000cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <__io_putchar+0x20>)
 8000cfe:	f001 fefa 	bl	8002af6 <HAL_UART_Transmit>
  return ch;
 8000d02:	687b      	ldr	r3, [r7, #4]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000124 	.word	0x20000124

08000d10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART1_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d48:	f001 fe88 	bl	8002a5c <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f7ff fd75 	bl	8000840 <Error_Handler>
  }

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000124 	.word	0x20000124
 8000d60:	40011000 	.word	0x40011000

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d134      	bne.n	8000df0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_UART_MspInit+0x98>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_UART_MspInit+0x98>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_UART_MspInit+0x98>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_UART_MspInit+0x98>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <HAL_UART_MspInit+0x98>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_UART_MspInit+0x98>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4809      	ldr	r0, [pc, #36]	; (8000e00 <HAL_UART_MspInit+0x9c>)
 8000ddc:	f000 fa04 	bl	80011e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2025      	movs	r0, #37	; 0x25
 8000de6:	f000 f9a6 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dea:	2025      	movs	r0, #37	; 0x25
 8000dec:	f000 f9bf 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
  ldr  r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff fe43 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f002 fd51 	bl	80038d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fc1d 	bl	8000674 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e40:	08004304 	.word	0x08004304
  ldr  r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e48:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e4c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e50:	2000016c 	.word	0x2000016c

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f94d 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fcdc 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f965 	bl	800118a <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f92d 	bl	8001136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000164 	.word	0x20000164

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000164 	.word	0x20000164

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_Delay+0x40>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff29 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff3e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa2 	bl	80010dc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d004      	beq.n	80011c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e00c      	b.n	80011da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e16b      	b.n	80014dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 815a 	bne.w	80014d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d00b      	beq.n	8001242 <HAL_GPIO_Init+0x5a>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001236:	2b11      	cmp	r3, #17
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b12      	cmp	r3, #18
 8001240:	d130      	bne.n	80012a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001278:	2201      	movs	r2, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 0201 	and.w	r2, r3, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0xfc>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b12      	cmp	r3, #18
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80b4 	beq.w	80014d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_GPIO_Init+0x308>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a5e      	ldr	r2, [pc, #376]	; (80014f0 <HAL_GPIO_Init+0x308>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_GPIO_Init+0x308>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a5a      	ldr	r2, [pc, #360]	; (80014f4 <HAL_GPIO_Init+0x30c>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_GPIO_Init+0x310>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d02b      	beq.n	800140e <HAL_GPIO_Init+0x226>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a50      	ldr	r2, [pc, #320]	; (80014fc <HAL_GPIO_Init+0x314>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d025      	beq.n	800140a <HAL_GPIO_Init+0x222>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <HAL_GPIO_Init+0x318>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d01f      	beq.n	8001406 <HAL_GPIO_Init+0x21e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4e      	ldr	r2, [pc, #312]	; (8001504 <HAL_GPIO_Init+0x31c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d019      	beq.n	8001402 <HAL_GPIO_Init+0x21a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <HAL_GPIO_Init+0x320>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0x216>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4c      	ldr	r2, [pc, #304]	; (800150c <HAL_GPIO_Init+0x324>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x212>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4b      	ldr	r2, [pc, #300]	; (8001510 <HAL_GPIO_Init+0x328>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x20e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <HAL_GPIO_Init+0x32c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x20a>
 80013ee:	2307      	movs	r3, #7
 80013f0:	e00e      	b.n	8001410 <HAL_GPIO_Init+0x228>
 80013f2:	2308      	movs	r3, #8
 80013f4:	e00c      	b.n	8001410 <HAL_GPIO_Init+0x228>
 80013f6:	2306      	movs	r3, #6
 80013f8:	e00a      	b.n	8001410 <HAL_GPIO_Init+0x228>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e008      	b.n	8001410 <HAL_GPIO_Init+0x228>
 80013fe:	2304      	movs	r3, #4
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x228>
 8001402:	2303      	movs	r3, #3
 8001404:	e004      	b.n	8001410 <HAL_GPIO_Init+0x228>
 8001406:	2302      	movs	r3, #2
 8001408:	e002      	b.n	8001410 <HAL_GPIO_Init+0x228>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x228>
 800140e:	2300      	movs	r3, #0
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f002 0203 	and.w	r2, r2, #3
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4093      	lsls	r3, r2
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001420:	4934      	ldr	r1, [pc, #208]	; (80014f4 <HAL_GPIO_Init+0x30c>)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_GPIO_Init+0x330>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001452:	4a31      	ldr	r2, [pc, #196]	; (8001518 <HAL_GPIO_Init+0x330>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_GPIO_Init+0x330>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147c:	4a26      	ldr	r2, [pc, #152]	; (8001518 <HAL_GPIO_Init+0x330>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <HAL_GPIO_Init+0x330>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_GPIO_Init+0x330>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_GPIO_Init+0x330>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d0:	4a11      	ldr	r2, [pc, #68]	; (8001518 <HAL_GPIO_Init+0x330>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	f67f ae90 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e4:	bf00      	nop
 80014e6:	3724      	adds	r7, #36	; 0x24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800
 8001504:	40020c00 	.word	0x40020c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40021400 	.word	0x40021400
 8001510:	40021800 	.word	0x40021800
 8001514:	40021c00 	.word	0x40021c00
 8001518:	40013c00 	.word	0x40013c00

0800151c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e001      	b.n	800153e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	041a      	lsls	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f806 	bl	80015b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40013c00 	.word	0x40013c00

080015b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e25b      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d075      	beq.n	80016d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e6:	4ba3      	ldr	r3, [pc, #652]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d00c      	beq.n	800160c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f2:	4ba0      	ldr	r3, [pc, #640]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d112      	bne.n	8001624 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	4b9d      	ldr	r3, [pc, #628]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800160a:	d10b      	bne.n	8001624 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	4b99      	ldr	r3, [pc, #612]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d05b      	beq.n	80016d0 <HAL_RCC_OscConfig+0x108>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d157      	bne.n	80016d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e236      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0x74>
 800162e:	4b91      	ldr	r3, [pc, #580]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a90      	ldr	r2, [pc, #576]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e01d      	b.n	8001678 <HAL_RCC_OscConfig+0xb0>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x98>
 8001646:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a8a      	ldr	r2, [pc, #552]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0xb0>
 8001660:	4b84      	ldr	r3, [pc, #528]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a83      	ldr	r2, [pc, #524]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b81      	ldr	r3, [pc, #516]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a80      	ldr	r2, [pc, #512]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fc50 	bl	8000f24 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fc4c 	bl	8000f24 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1fb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0xc0>
 80016a6:	e014      	b.n	80016d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fc3c 	bl	8000f24 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fc38 	bl	8000f24 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1e7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	4b6c      	ldr	r3, [pc, #432]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0xe8>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d063      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016de:	4b65      	ldr	r3, [pc, #404]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ea:	4b62      	ldr	r3, [pc, #392]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d11c      	bne.n	8001730 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f6:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d116      	bne.n	8001730 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x152>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d001      	beq.n	800171a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e1bb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b56      	ldr	r3, [pc, #344]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4952      	ldr	r1, [pc, #328]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	e03a      	b.n	80017a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001738:	4b4f      	ldr	r3, [pc, #316]	; (8001878 <HAL_RCC_OscConfig+0x2b0>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fbf1 	bl	8000f24 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fbed 	bl	8000f24 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e19c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	4b46      	ldr	r3, [pc, #280]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b43      	ldr	r3, [pc, #268]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4940      	ldr	r1, [pc, #256]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
 8001778:	e015      	b.n	80017a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <HAL_RCC_OscConfig+0x2b0>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fbd0 	bl	8000f24 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fbcc 	bl	8000f24 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e17b      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d030      	beq.n	8001814 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d016      	beq.n	80017e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ba:	4b30      	ldr	r3, [pc, #192]	; (800187c <HAL_RCC_OscConfig+0x2b4>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fbb0 	bl	8000f24 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fbac 	bl	8000f24 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e15b      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x200>
 80017e6:	e015      	b.n	8001814 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_OscConfig+0x2b4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fb99 	bl	8000f24 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fb95 	bl	8000f24 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e144      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800180a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a0 	beq.w	8001962 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d121      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a07      	ldr	r2, [pc, #28]	; (8001880 <HAL_RCC_OscConfig+0x2b8>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff fb5b 	bl	8000f24 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	e011      	b.n	8001896 <HAL_RCC_OscConfig+0x2ce>
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	42470000 	.word	0x42470000
 800187c:	42470e80 	.word	0x42470e80
 8001880:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7ff fb4e 	bl	8000f24 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0fd      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b81      	ldr	r3, [pc, #516]	; (8001a9c <HAL_RCC_OscConfig+0x4d4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2f0>
 80018aa:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a7c      	ldr	r2, [pc, #496]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	e01c      	b.n	80018f2 <HAL_RCC_OscConfig+0x32a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d10c      	bne.n	80018da <HAL_RCC_OscConfig+0x312>
 80018c0:	4b77      	ldr	r3, [pc, #476]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a76      	ldr	r2, [pc, #472]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
 80018cc:	4b74      	ldr	r3, [pc, #464]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a73      	ldr	r2, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	e00b      	b.n	80018f2 <HAL_RCC_OscConfig+0x32a>
 80018da:	4b71      	ldr	r3, [pc, #452]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a70      	ldr	r2, [pc, #448]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
 80018e6:	4b6e      	ldr	r3, [pc, #440]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a6d      	ldr	r2, [pc, #436]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d015      	beq.n	8001926 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff fb13 	bl	8000f24 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff fb0f 	bl	8000f24 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0bc      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001918:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ee      	beq.n	8001902 <HAL_RCC_OscConfig+0x33a>
 8001924:	e014      	b.n	8001950 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff fafd 	bl	8000f24 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff faf9 	bl	8000f24 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0a6      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ee      	bne.n	800192e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d105      	bne.n	8001962 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001956:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 800195c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8092 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d05c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d141      	bne.n	8001a04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4b48      	ldr	r3, [pc, #288]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff facd 	bl	8000f24 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fac9 	bl	8000f24 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e078      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a0:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	019b      	lsls	r3, r3, #6
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	3b01      	subs	r3, #1
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	061b      	lsls	r3, r3, #24
 80019d0:	4933      	ldr	r1, [pc, #204]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff faa2 	bl	8000f24 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff fa9e 	bl	8000f24 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04d      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x41c>
 8001a02:	e045      	b.n	8001a90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_OscConfig+0x4dc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fa8b 	bl	8000f24 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff fa87 	bl	8000f24 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e036      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x44a>
 8001a30:	e02e      	b.n	8001a90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e029      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_RCC_OscConfig+0x4d8>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d11c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d115      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d10d      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d106      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	42470060 	.word	0x42470060

08001aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0cc      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001abc:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d90c      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d044      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d119      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e067      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b86:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f023 0203 	bic.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4934      	ldr	r1, [pc, #208]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b98:	f7ff f9c4 	bl	8000f24 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7ff f9c0 	bl	8000f24 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e04f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 020c 	and.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1eb      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d20c      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4601      	mov	r1, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	fa21 f303 	lsr.w	r3, r1, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f924 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08004278 	.word	0x08004278
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c8a:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x158>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d007      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x32>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d008      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x38>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 808d 	bne.w	8001dba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ca2:	60bb      	str	r3, [r7, #8]
       break;
 8001ca4:	e08c      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca6:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ca8:	60bb      	str	r3, [r7, #8]
      break;
 8001caa:	e089      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x158>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb6:	4b45      	ldr	r3, [pc, #276]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x158>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d023      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x158>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	ea03 0501 	and.w	r5, r3, r1
 8001cd8:	ea04 0602 	and.w	r6, r4, r2
 8001cdc:	4a3d      	ldr	r2, [pc, #244]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cde:	fb02 f106 	mul.w	r1, r2, r6
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	fb02 f205 	mul.w	r2, r2, r5
 8001ce8:	440a      	add	r2, r1
 8001cea:	493a      	ldr	r1, [pc, #232]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cec:	fba5 0101 	umull	r0, r1, r5, r1
 8001cf0:	1853      	adds	r3, r2, r1
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f04f 0400 	mov.w	r4, #0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	f7fe fa63 	bl	80001c8 <__aeabi_uldivmod>
 8001d02:	4603      	mov	r3, r0
 8001d04:	460c      	mov	r4, r1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	e049      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x158>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	f04f 0400 	mov.w	r4, #0
 8001d14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	ea03 0501 	and.w	r5, r3, r1
 8001d20:	ea04 0602 	and.w	r6, r4, r2
 8001d24:	4629      	mov	r1, r5
 8001d26:	4632      	mov	r2, r6
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	f04f 0400 	mov.w	r4, #0
 8001d30:	0154      	lsls	r4, r2, #5
 8001d32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d36:	014b      	lsls	r3, r1, #5
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	1b49      	subs	r1, r1, r5
 8001d3e:	eb62 0206 	sbc.w	r2, r2, r6
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	f04f 0400 	mov.w	r4, #0
 8001d4a:	0194      	lsls	r4, r2, #6
 8001d4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d50:	018b      	lsls	r3, r1, #6
 8001d52:	1a5b      	subs	r3, r3, r1
 8001d54:	eb64 0402 	sbc.w	r4, r4, r2
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	00e2      	lsls	r2, r4, #3
 8001d62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d66:	00d9      	lsls	r1, r3, #3
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4614      	mov	r4, r2
 8001d6c:	195b      	adds	r3, r3, r5
 8001d6e:	eb44 0406 	adc.w	r4, r4, r6
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	02a2      	lsls	r2, r4, #10
 8001d7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d80:	0299      	lsls	r1, r3, #10
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	4621      	mov	r1, r4
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f04f 0400 	mov.w	r4, #0
 8001d90:	461a      	mov	r2, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	f7fe fa18 	bl	80001c8 <__aeabi_uldivmod>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x158>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	0c1b      	lsrs	r3, r3, #16
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	3301      	adds	r3, #1
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	60bb      	str	r3, [r7, #8]
      break;
 8001db8:	e002      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001dbc:	60bb      	str	r3, [r7, #8]
      break;
 8001dbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	017d7840 	.word	0x017d7840

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_RCC_GetHCLKFreq+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff0 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df8:	4601      	mov	r1, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a9b      	lsrs	r3, r3, #10
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	08004288 	.word	0x08004288

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffdc 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e20:	4601      	mov	r1, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0b5b      	lsrs	r3, r3, #13
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	08004288 	.word	0x08004288

08001e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e01d      	b.n	8001e8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fec0 	bl	8000bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f000 fae6 	bl	8002450 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b06      	cmp	r3, #6
 8001ebe:	d007      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e01d      	b.n	8001f2c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f815 	bl	8001f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f000 fa97 	bl	8002450 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d841      	bhi.n	8001fdc <HAL_TIM_PWM_Start_IT+0x94>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <HAL_TIM_PWM_Start_IT+0x18>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f95 	.word	0x08001f95
 8001f64:	08001fdd 	.word	0x08001fdd
 8001f68:	08001fdd 	.word	0x08001fdd
 8001f6c:	08001fdd 	.word	0x08001fdd
 8001f70:	08001fa7 	.word	0x08001fa7
 8001f74:	08001fdd 	.word	0x08001fdd
 8001f78:	08001fdd 	.word	0x08001fdd
 8001f7c:	08001fdd 	.word	0x08001fdd
 8001f80:	08001fb9 	.word	0x08001fb9
 8001f84:	08001fdd 	.word	0x08001fdd
 8001f88:	08001fdd 	.word	0x08001fdd
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fcb 	.word	0x08001fcb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0202 	orr.w	r2, r2, #2
 8001fa2:	60da      	str	r2, [r3, #12]
      break;
 8001fa4:	e01b      	b.n	8001fde <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0204 	orr.w	r2, r2, #4
 8001fb4:	60da      	str	r2, [r3, #12]
      break;
 8001fb6:	e012      	b.n	8001fde <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0208 	orr.w	r2, r2, #8
 8001fc6:	60da      	str	r2, [r3, #12]
      break;
 8001fc8:	e009      	b.n	8001fde <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	60da      	str	r2, [r3, #12]
      break;
 8001fda:	e000      	b.n	8001fde <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8001fdc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fc82 	bl	80028f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a15      	ldr	r2, [pc, #84]	; (8002048 <HAL_TIM_PWM_Start_IT+0x100>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_TIM_PWM_Start_IT+0xb8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_TIM_PWM_Start_IT+0x104>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_TIM_PWM_Start_IT+0xbc>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_TIM_PWM_Start_IT+0xbe>
 8002004:	2300      	movs	r3, #0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b06      	cmp	r3, #6
 800202a:	d007      	beq.n	800203c <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d122      	bne.n	80020ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b02      	cmp	r3, #2
 8002072:	d11b      	bne.n	80020ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0202 	mvn.w	r2, #2
 800207c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f9be 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f9b0 	bl	8002400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f9c1 	bl	8002428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d122      	bne.n	8002100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0204 	mvn.w	r2, #4
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f994 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f986 	bl	8002400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f997 	bl	8002428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d122      	bne.n	8002154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0208 	mvn.w	r2, #8
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2204      	movs	r2, #4
 800212a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f96a 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f95c 	bl	8002400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f96d 	bl	8002428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b10      	cmp	r3, #16
 8002160:	d122      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b10      	cmp	r3, #16
 800216e:	d11b      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0210 	mvn.w	r2, #16
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2208      	movs	r2, #8
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f940 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f932 	bl	8002400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f943 	bl	8002428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0201 	mvn.w	r2, #1
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f90c 	bl	80023ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fc24 	bl	8002a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d10e      	bne.n	800222c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d107      	bne.n	800222c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f908 	bl	800243c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b20      	cmp	r3, #32
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b20      	cmp	r3, #32
 8002246:	d107      	bne.n	8002258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0220 	mvn.w	r2, #32
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fbee 	bl	8002a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002276:	2302      	movs	r3, #2
 8002278:	e0b4      	b.n	80023e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2202      	movs	r2, #2
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	f200 809f 	bhi.w	80023d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022cd 	.word	0x080022cd
 800229c:	080023d1 	.word	0x080023d1
 80022a0:	080023d1 	.word	0x080023d1
 80022a4:	080023d1 	.word	0x080023d1
 80022a8:	0800230d 	.word	0x0800230d
 80022ac:	080023d1 	.word	0x080023d1
 80022b0:	080023d1 	.word	0x080023d1
 80022b4:	080023d1 	.word	0x080023d1
 80022b8:	0800234f 	.word	0x0800234f
 80022bc:	080023d1 	.word	0x080023d1
 80022c0:	080023d1 	.word	0x080023d1
 80022c4:	080023d1 	.word	0x080023d1
 80022c8:	0800238f 	.word	0x0800238f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f95c 	bl	8002590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0208 	orr.w	r2, r2, #8
 80022e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0204 	bic.w	r2, r2, #4
 80022f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6999      	ldr	r1, [r3, #24]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	619a      	str	r2, [r3, #24]
      break;
 800230a:	e062      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f9ac 	bl	8002670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6999      	ldr	r1, [r3, #24]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	021a      	lsls	r2, r3, #8
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	619a      	str	r2, [r3, #24]
      break;
 800234c:	e041      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fa01 	bl	800275c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0208 	orr.w	r2, r2, #8
 8002368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0204 	bic.w	r2, r2, #4
 8002378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69d9      	ldr	r1, [r3, #28]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	61da      	str	r2, [r3, #28]
      break;
 800238c:	e021      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fa55 	bl	8002844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69d9      	ldr	r1, [r3, #28]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	021a      	lsls	r2, r3, #8
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	61da      	str	r2, [r3, #28]
      break;
 80023ce:	e000      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80023d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a40      	ldr	r2, [pc, #256]	; (8002564 <TIM_Base_SetConfig+0x114>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246e:	d00f      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3d      	ldr	r2, [pc, #244]	; (8002568 <TIM_Base_SetConfig+0x118>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00b      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3c      	ldr	r2, [pc, #240]	; (800256c <TIM_Base_SetConfig+0x11c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <TIM_Base_SetConfig+0x120>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3a      	ldr	r2, [pc, #232]	; (8002574 <TIM_Base_SetConfig+0x124>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <TIM_Base_SetConfig+0x114>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d02b      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d027      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <TIM_Base_SetConfig+0x118>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d023      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <TIM_Base_SetConfig+0x11c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01f      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <TIM_Base_SetConfig+0x120>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01b      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a29      	ldr	r2, [pc, #164]	; (8002574 <TIM_Base_SetConfig+0x124>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d017      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a28      	ldr	r2, [pc, #160]	; (8002578 <TIM_Base_SetConfig+0x128>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a27      	ldr	r2, [pc, #156]	; (800257c <TIM_Base_SetConfig+0x12c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00f      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <TIM_Base_SetConfig+0x130>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00b      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a25      	ldr	r2, [pc, #148]	; (8002584 <TIM_Base_SetConfig+0x134>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a24      	ldr	r2, [pc, #144]	; (8002588 <TIM_Base_SetConfig+0x138>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d003      	beq.n	8002502 <TIM_Base_SetConfig+0xb2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a23      	ldr	r2, [pc, #140]	; (800258c <TIM_Base_SetConfig+0x13c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d108      	bne.n	8002514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <TIM_Base_SetConfig+0x114>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <TIM_Base_SetConfig+0xf8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <TIM_Base_SetConfig+0x124>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40010000 	.word	0x40010000
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00
 8002574:	40010400 	.word	0x40010400
 8002578:	40014000 	.word	0x40014000
 800257c:	40014400 	.word	0x40014400
 8002580:	40014800 	.word	0x40014800
 8002584:	40001800 	.word	0x40001800
 8002588:	40001c00 	.word	0x40001c00
 800258c:	40002000 	.word	0x40002000

08002590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f023 0201 	bic.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 0302 	bic.w	r3, r3, #2
 80025d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a20      	ldr	r2, [pc, #128]	; (8002668 <TIM_OC1_SetConfig+0xd8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <TIM_OC1_SetConfig+0x64>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a1f      	ldr	r2, [pc, #124]	; (800266c <TIM_OC1_SetConfig+0xdc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d10c      	bne.n	800260e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0308 	bic.w	r3, r3, #8
 80025fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <TIM_OC1_SetConfig+0xd8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d003      	beq.n	800261e <TIM_OC1_SetConfig+0x8e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <TIM_OC1_SetConfig+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d111      	bne.n	8002642 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800262c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	621a      	str	r2, [r3, #32]
}
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40010000 	.word	0x40010000
 800266c:	40010400 	.word	0x40010400

08002670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	f023 0210 	bic.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f023 0320 	bic.w	r3, r3, #32
 80026ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a22      	ldr	r2, [pc, #136]	; (8002754 <TIM_OC2_SetConfig+0xe4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_OC2_SetConfig+0x68>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a21      	ldr	r2, [pc, #132]	; (8002758 <TIM_OC2_SetConfig+0xe8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10d      	bne.n	80026f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a17      	ldr	r2, [pc, #92]	; (8002754 <TIM_OC2_SetConfig+0xe4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <TIM_OC2_SetConfig+0x94>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <TIM_OC2_SetConfig+0xe8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d113      	bne.n	800272c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800270a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40010400 	.word	0x40010400

0800275c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0303 	bic.w	r3, r3, #3
 8002792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <TIM_OC3_SetConfig+0xe0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_OC3_SetConfig+0x66>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a20      	ldr	r2, [pc, #128]	; (8002840 <TIM_OC3_SetConfig+0xe4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10d      	bne.n	80027de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a16      	ldr	r2, [pc, #88]	; (800283c <TIM_OC3_SetConfig+0xe0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <TIM_OC3_SetConfig+0x92>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a15      	ldr	r2, [pc, #84]	; (8002840 <TIM_OC3_SetConfig+0xe4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d113      	bne.n	8002816 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	621a      	str	r2, [r3, #32]
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40010000 	.word	0x40010000
 8002840:	40010400 	.word	0x40010400

08002844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800288e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	031b      	lsls	r3, r3, #12
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <TIM_OC4_SetConfig+0xa4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_OC4_SetConfig+0x68>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a11      	ldr	r2, [pc, #68]	; (80028ec <TIM_OC4_SetConfig+0xa8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d109      	bne.n	80028c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	019b      	lsls	r3, r3, #6
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	621a      	str	r2, [r3, #32]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40010400 	.word	0x40010400

080028f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2201      	movs	r2, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a1a      	ldr	r2, [r3, #32]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a1a      	ldr	r2, [r3, #32]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002950:	2302      	movs	r3, #2
 8002952:	e05a      	b.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d01d      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10c      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40010400 	.word	0x40010400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40001800 	.word	0x40001800

08002a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e03f      	b.n	8002aee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe f96e 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	; 0x24
 8002a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fb97 	bl	80031d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b088      	sub	sp, #32
 8002afa:	af02      	add	r7, sp, #8
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	f040 8083 	bne.w	8002c1e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_UART_Transmit+0x2e>
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e07b      	b.n	8002c20 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Transmit+0x40>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e074      	b.n	8002c20 <HAL_UART_Transmit+0x12a>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2221      	movs	r2, #33	; 0x21
 8002b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe f9ea 	bl	8000f24 <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b66:	e042      	b.n	8002bee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	d122      	bne.n	8002bc6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2180      	movs	r1, #128	; 0x80
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f9b6 	bl	8002efc <UART_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e042      	b.n	8002c20 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	e017      	b.n	8002bee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	e013      	b.n	8002bee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f993 	bl	8002efc <UART_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e01f      	b.n	8002c20 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	60ba      	str	r2, [r7, #8]
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1b7      	bne.n	8002b68 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f97a 	bl	8002efc <UART_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e006      	b.n	8002c20 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d140      	bne.n	8002cc4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_UART_Receive_IT+0x26>
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e039      	b.n	8002cc6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_UART_Receive_IT+0x38>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e032      	b.n	8002cc6 <HAL_UART_Receive_IT+0x9e>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2222      	movs	r2, #34	; 0x22
 8002c84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0220 	orr.w	r2, r2, #32
 8002cbe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10d      	bne.n	8002d26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_UART_IRQHandler+0x52>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9d6 	bl	80030d0 <UART_Receive_IT>
      return;
 8002d24:	e0d1      	b.n	8002eca <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80b0 	beq.w	8002e8e <HAL_UART_IRQHandler+0x1ba>
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_UART_IRQHandler+0x70>
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80a5 	beq.w	8002e8e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_UART_IRQHandler+0x90>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_UART_IRQHandler+0xb0>
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	f043 0202 	orr.w	r2, r3, #2
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_UART_IRQHandler+0xd0>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	f043 0204 	orr.w	r2, r3, #4
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00f      	beq.n	8002dce <HAL_UART_IRQHandler+0xfa>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_UART_IRQHandler+0xee>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	f043 0208 	orr.w	r2, r3, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d078      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <HAL_UART_IRQHandler+0x11c>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f970 	bl	80030d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_UART_IRQHandler+0x144>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d031      	beq.n	8002e7c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8b9 	bl	8002f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d123      	bne.n	8002e74 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_UART_IRQHandler+0x1fc>)
 8002e4a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe f9a6 	bl	80011a2 <HAL_DMA_Abort_IT>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d016      	beq.n	8002e8a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e66:	4610      	mov	r0, r2
 8002e68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6a:	e00e      	b.n	8002e8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f83b 	bl	8002ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e72:	e00a      	b.n	8002e8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f837 	bl	8002ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7a:	e006      	b.n	8002e8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f833 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e88:	e01e      	b.n	8002ec8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8a:	bf00      	nop
    return;
 8002e8c:	e01c      	b.n	8002ec8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_UART_IRQHandler+0x1d6>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8a6 	bl	8002ff4 <UART_Transmit_IT>
    return;
 8002ea8:	e00f      	b.n	8002eca <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_UART_IRQHandler+0x1f6>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8ee 	bl	80030a0 <UART_EndTransmit_IT>
    return;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <HAL_UART_IRQHandler+0x1f6>
    return;
 8002ec8:	bf00      	nop
  }
}
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	08002fcd 	.word	0x08002fcd

08002ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0c:	e02c      	b.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d028      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f1c:	f7fe f802 	bl	8000f24 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d21d      	bcs.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e00f      	b.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d0c3      	beq.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff ff7e 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b21      	cmp	r3, #33	; 0x21
 8003006:	d144      	bne.n	8003092 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003010:	d11a      	bne.n	8003048 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003026:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	621a      	str	r2, [r3, #32]
 800303a:	e00e      	b.n	800305a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]
 8003046:	e008      	b.n	800305a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6211      	str	r1, [r2, #32]
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	84d1      	strh	r1, [r2, #38]	; 0x26
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800307c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800308c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff07 	bl	8002ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b22      	cmp	r3, #34	; 0x22
 80030e2:	d171      	bne.n	80031c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	d123      	bne.n	8003136 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10e      	bne.n	800311a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	1c9a      	adds	r2, r3, #2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
 8003118:	e029      	b.n	800316e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	b29b      	uxth	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
 8003134:	e01b      	b.n	800316e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6858      	ldr	r0, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	1c59      	adds	r1, r3, #1
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6291      	str	r1, [r2, #40]	; 0x28
 800314e:	b2c2      	uxtb	r2, r0
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e00c      	b.n	800316e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	1c58      	adds	r0, r3, #1
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	6288      	str	r0, [r1, #40]	; 0x28
 8003166:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4619      	mov	r1, r3
 800317c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800317e:	2b00      	cmp	r3, #0
 8003180:	d120      	bne.n	80031c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0220 	bic.w	r2, r2, #32
 8003190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fb1e 	bl	80007fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e002      	b.n	80031ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003216:	f023 030c 	bic.w	r3, r3, #12
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	430b      	orrs	r3, r1
 8003222:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003242:	f040 818b 	bne.w	800355c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4ac1      	ldr	r2, [pc, #772]	; (8003550 <UART_SetConfig+0x37c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d005      	beq.n	800325c <UART_SetConfig+0x88>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4abf      	ldr	r2, [pc, #764]	; (8003554 <UART_SetConfig+0x380>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f040 80bd 	bne.w	80033d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800325c:	f7fe fddc 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8003260:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	461d      	mov	r5, r3
 8003266:	f04f 0600 	mov.w	r6, #0
 800326a:	46a8      	mov	r8, r5
 800326c:	46b1      	mov	r9, r6
 800326e:	eb18 0308 	adds.w	r3, r8, r8
 8003272:	eb49 0409 	adc.w	r4, r9, r9
 8003276:	4698      	mov	r8, r3
 8003278:	46a1      	mov	r9, r4
 800327a:	eb18 0805 	adds.w	r8, r8, r5
 800327e:	eb49 0906 	adc.w	r9, r9, r6
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800328e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003292:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003296:	4688      	mov	r8, r1
 8003298:	4691      	mov	r9, r2
 800329a:	eb18 0005 	adds.w	r0, r8, r5
 800329e:	eb49 0106 	adc.w	r1, r9, r6
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	461d      	mov	r5, r3
 80032a8:	f04f 0600 	mov.w	r6, #0
 80032ac:	196b      	adds	r3, r5, r5
 80032ae:	eb46 0406 	adc.w	r4, r6, r6
 80032b2:	461a      	mov	r2, r3
 80032b4:	4623      	mov	r3, r4
 80032b6:	f7fc ff87 	bl	80001c8 <__aeabi_uldivmod>
 80032ba:	4603      	mov	r3, r0
 80032bc:	460c      	mov	r4, r1
 80032be:	461a      	mov	r2, r3
 80032c0:	4ba5      	ldr	r3, [pc, #660]	; (8003558 <UART_SetConfig+0x384>)
 80032c2:	fba3 2302 	umull	r2, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	461d      	mov	r5, r3
 80032d0:	f04f 0600 	mov.w	r6, #0
 80032d4:	46a9      	mov	r9, r5
 80032d6:	46b2      	mov	sl, r6
 80032d8:	eb19 0309 	adds.w	r3, r9, r9
 80032dc:	eb4a 040a 	adc.w	r4, sl, sl
 80032e0:	4699      	mov	r9, r3
 80032e2:	46a2      	mov	sl, r4
 80032e4:	eb19 0905 	adds.w	r9, r9, r5
 80032e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003300:	4689      	mov	r9, r1
 8003302:	4692      	mov	sl, r2
 8003304:	eb19 0005 	adds.w	r0, r9, r5
 8003308:	eb4a 0106 	adc.w	r1, sl, r6
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	461d      	mov	r5, r3
 8003312:	f04f 0600 	mov.w	r6, #0
 8003316:	196b      	adds	r3, r5, r5
 8003318:	eb46 0406 	adc.w	r4, r6, r6
 800331c:	461a      	mov	r2, r3
 800331e:	4623      	mov	r3, r4
 8003320:	f7fc ff52 	bl	80001c8 <__aeabi_uldivmod>
 8003324:	4603      	mov	r3, r0
 8003326:	460c      	mov	r4, r1
 8003328:	461a      	mov	r2, r3
 800332a:	4b8b      	ldr	r3, [pc, #556]	; (8003558 <UART_SetConfig+0x384>)
 800332c:	fba3 1302 	umull	r1, r3, r3, r2
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2164      	movs	r1, #100	; 0x64
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a86      	ldr	r2, [pc, #536]	; (8003558 <UART_SetConfig+0x384>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800334c:	4498      	add	r8, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	461d      	mov	r5, r3
 8003352:	f04f 0600 	mov.w	r6, #0
 8003356:	46a9      	mov	r9, r5
 8003358:	46b2      	mov	sl, r6
 800335a:	eb19 0309 	adds.w	r3, r9, r9
 800335e:	eb4a 040a 	adc.w	r4, sl, sl
 8003362:	4699      	mov	r9, r3
 8003364:	46a2      	mov	sl, r4
 8003366:	eb19 0905 	adds.w	r9, r9, r5
 800336a:	eb4a 0a06 	adc.w	sl, sl, r6
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800337e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003382:	4689      	mov	r9, r1
 8003384:	4692      	mov	sl, r2
 8003386:	eb19 0005 	adds.w	r0, r9, r5
 800338a:	eb4a 0106 	adc.w	r1, sl, r6
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	461d      	mov	r5, r3
 8003394:	f04f 0600 	mov.w	r6, #0
 8003398:	196b      	adds	r3, r5, r5
 800339a:	eb46 0406 	adc.w	r4, r6, r6
 800339e:	461a      	mov	r2, r3
 80033a0:	4623      	mov	r3, r4
 80033a2:	f7fc ff11 	bl	80001c8 <__aeabi_uldivmod>
 80033a6:	4603      	mov	r3, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <UART_SetConfig+0x384>)
 80033ae:	fba3 1302 	umull	r1, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2164      	movs	r1, #100	; 0x64
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	3332      	adds	r3, #50	; 0x32
 80033c0:	4a65      	ldr	r2, [pc, #404]	; (8003558 <UART_SetConfig+0x384>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 0207 	and.w	r2, r3, #7
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4442      	add	r2, r8
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	e26f      	b.n	80038b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033d6:	f7fe fd0b 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 80033da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	461d      	mov	r5, r3
 80033e0:	f04f 0600 	mov.w	r6, #0
 80033e4:	46a8      	mov	r8, r5
 80033e6:	46b1      	mov	r9, r6
 80033e8:	eb18 0308 	adds.w	r3, r8, r8
 80033ec:	eb49 0409 	adc.w	r4, r9, r9
 80033f0:	4698      	mov	r8, r3
 80033f2:	46a1      	mov	r9, r4
 80033f4:	eb18 0805 	adds.w	r8, r8, r5
 80033f8:	eb49 0906 	adc.w	r9, r9, r6
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003408:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800340c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003410:	4688      	mov	r8, r1
 8003412:	4691      	mov	r9, r2
 8003414:	eb18 0005 	adds.w	r0, r8, r5
 8003418:	eb49 0106 	adc.w	r1, r9, r6
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	461d      	mov	r5, r3
 8003422:	f04f 0600 	mov.w	r6, #0
 8003426:	196b      	adds	r3, r5, r5
 8003428:	eb46 0406 	adc.w	r4, r6, r6
 800342c:	461a      	mov	r2, r3
 800342e:	4623      	mov	r3, r4
 8003430:	f7fc feca 	bl	80001c8 <__aeabi_uldivmod>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	461a      	mov	r2, r3
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <UART_SetConfig+0x384>)
 800343c:	fba3 2302 	umull	r2, r3, r3, r2
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	461d      	mov	r5, r3
 800344a:	f04f 0600 	mov.w	r6, #0
 800344e:	46a9      	mov	r9, r5
 8003450:	46b2      	mov	sl, r6
 8003452:	eb19 0309 	adds.w	r3, r9, r9
 8003456:	eb4a 040a 	adc.w	r4, sl, sl
 800345a:	4699      	mov	r9, r3
 800345c:	46a2      	mov	sl, r4
 800345e:	eb19 0905 	adds.w	r9, r9, r5
 8003462:	eb4a 0a06 	adc.w	sl, sl, r6
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800347a:	4689      	mov	r9, r1
 800347c:	4692      	mov	sl, r2
 800347e:	eb19 0005 	adds.w	r0, r9, r5
 8003482:	eb4a 0106 	adc.w	r1, sl, r6
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	461d      	mov	r5, r3
 800348c:	f04f 0600 	mov.w	r6, #0
 8003490:	196b      	adds	r3, r5, r5
 8003492:	eb46 0406 	adc.w	r4, r6, r6
 8003496:	461a      	mov	r2, r3
 8003498:	4623      	mov	r3, r4
 800349a:	f7fc fe95 	bl	80001c8 <__aeabi_uldivmod>
 800349e:	4603      	mov	r3, r0
 80034a0:	460c      	mov	r4, r1
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <UART_SetConfig+0x384>)
 80034a6:	fba3 1302 	umull	r1, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2164      	movs	r1, #100	; 0x64
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	3332      	adds	r3, #50	; 0x32
 80034b8:	4a27      	ldr	r2, [pc, #156]	; (8003558 <UART_SetConfig+0x384>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034c6:	4498      	add	r8, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	461d      	mov	r5, r3
 80034cc:	f04f 0600 	mov.w	r6, #0
 80034d0:	46a9      	mov	r9, r5
 80034d2:	46b2      	mov	sl, r6
 80034d4:	eb19 0309 	adds.w	r3, r9, r9
 80034d8:	eb4a 040a 	adc.w	r4, sl, sl
 80034dc:	4699      	mov	r9, r3
 80034de:	46a2      	mov	sl, r4
 80034e0:	eb19 0905 	adds.w	r9, r9, r5
 80034e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034fc:	4689      	mov	r9, r1
 80034fe:	4692      	mov	sl, r2
 8003500:	eb19 0005 	adds.w	r0, r9, r5
 8003504:	eb4a 0106 	adc.w	r1, sl, r6
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	461d      	mov	r5, r3
 800350e:	f04f 0600 	mov.w	r6, #0
 8003512:	196b      	adds	r3, r5, r5
 8003514:	eb46 0406 	adc.w	r4, r6, r6
 8003518:	461a      	mov	r2, r3
 800351a:	4623      	mov	r3, r4
 800351c:	f7fc fe54 	bl	80001c8 <__aeabi_uldivmod>
 8003520:	4603      	mov	r3, r0
 8003522:	460c      	mov	r4, r1
 8003524:	461a      	mov	r2, r3
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <UART_SetConfig+0x384>)
 8003528:	fba3 1302 	umull	r1, r3, r3, r2
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	2164      	movs	r1, #100	; 0x64
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	3332      	adds	r3, #50	; 0x32
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <UART_SetConfig+0x384>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	f003 0207 	and.w	r2, r3, #7
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4442      	add	r2, r8
 800354c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800354e:	e1b2      	b.n	80038b6 <UART_SetConfig+0x6e2>
 8003550:	40011000 	.word	0x40011000
 8003554:	40011400 	.word	0x40011400
 8003558:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4ad7      	ldr	r2, [pc, #860]	; (80038c0 <UART_SetConfig+0x6ec>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d005      	beq.n	8003572 <UART_SetConfig+0x39e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4ad6      	ldr	r2, [pc, #856]	; (80038c4 <UART_SetConfig+0x6f0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	f040 80d1 	bne.w	8003714 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003572:	f7fe fc51 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8003576:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	469a      	mov	sl, r3
 800357c:	f04f 0b00 	mov.w	fp, #0
 8003580:	46d0      	mov	r8, sl
 8003582:	46d9      	mov	r9, fp
 8003584:	eb18 0308 	adds.w	r3, r8, r8
 8003588:	eb49 0409 	adc.w	r4, r9, r9
 800358c:	4698      	mov	r8, r3
 800358e:	46a1      	mov	r9, r4
 8003590:	eb18 080a 	adds.w	r8, r8, sl
 8003594:	eb49 090b 	adc.w	r9, r9, fp
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035ac:	4688      	mov	r8, r1
 80035ae:	4691      	mov	r9, r2
 80035b0:	eb1a 0508 	adds.w	r5, sl, r8
 80035b4:	eb4b 0609 	adc.w	r6, fp, r9
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4619      	mov	r1, r3
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	f04f 0400 	mov.w	r4, #0
 80035ca:	0094      	lsls	r4, r2, #2
 80035cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035d0:	008b      	lsls	r3, r1, #2
 80035d2:	461a      	mov	r2, r3
 80035d4:	4623      	mov	r3, r4
 80035d6:	4628      	mov	r0, r5
 80035d8:	4631      	mov	r1, r6
 80035da:	f7fc fdf5 	bl	80001c8 <__aeabi_uldivmod>
 80035de:	4603      	mov	r3, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	461a      	mov	r2, r3
 80035e4:	4bb8      	ldr	r3, [pc, #736]	; (80038c8 <UART_SetConfig+0x6f4>)
 80035e6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	469b      	mov	fp, r3
 80035f4:	f04f 0c00 	mov.w	ip, #0
 80035f8:	46d9      	mov	r9, fp
 80035fa:	46e2      	mov	sl, ip
 80035fc:	eb19 0309 	adds.w	r3, r9, r9
 8003600:	eb4a 040a 	adc.w	r4, sl, sl
 8003604:	4699      	mov	r9, r3
 8003606:	46a2      	mov	sl, r4
 8003608:	eb19 090b 	adds.w	r9, r9, fp
 800360c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003610:	f04f 0100 	mov.w	r1, #0
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003624:	4689      	mov	r9, r1
 8003626:	4692      	mov	sl, r2
 8003628:	eb1b 0509 	adds.w	r5, fp, r9
 800362c:	eb4c 060a 	adc.w	r6, ip, sl
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	f04f 0400 	mov.w	r4, #0
 8003642:	0094      	lsls	r4, r2, #2
 8003644:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003648:	008b      	lsls	r3, r1, #2
 800364a:	461a      	mov	r2, r3
 800364c:	4623      	mov	r3, r4
 800364e:	4628      	mov	r0, r5
 8003650:	4631      	mov	r1, r6
 8003652:	f7fc fdb9 	bl	80001c8 <__aeabi_uldivmod>
 8003656:	4603      	mov	r3, r0
 8003658:	460c      	mov	r4, r1
 800365a:	461a      	mov	r2, r3
 800365c:	4b9a      	ldr	r3, [pc, #616]	; (80038c8 <UART_SetConfig+0x6f4>)
 800365e:	fba3 1302 	umull	r1, r3, r3, r2
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2164      	movs	r1, #100	; 0x64
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	3332      	adds	r3, #50	; 0x32
 8003670:	4a95      	ldr	r2, [pc, #596]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367c:	4498      	add	r8, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	469b      	mov	fp, r3
 8003682:	f04f 0c00 	mov.w	ip, #0
 8003686:	46d9      	mov	r9, fp
 8003688:	46e2      	mov	sl, ip
 800368a:	eb19 0309 	adds.w	r3, r9, r9
 800368e:	eb4a 040a 	adc.w	r4, sl, sl
 8003692:	4699      	mov	r9, r3
 8003694:	46a2      	mov	sl, r4
 8003696:	eb19 090b 	adds.w	r9, r9, fp
 800369a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036b2:	4689      	mov	r9, r1
 80036b4:	4692      	mov	sl, r2
 80036b6:	eb1b 0509 	adds.w	r5, fp, r9
 80036ba:	eb4c 060a 	adc.w	r6, ip, sl
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4619      	mov	r1, r3
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	f04f 0400 	mov.w	r4, #0
 80036d0:	0094      	lsls	r4, r2, #2
 80036d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036d6:	008b      	lsls	r3, r1, #2
 80036d8:	461a      	mov	r2, r3
 80036da:	4623      	mov	r3, r4
 80036dc:	4628      	mov	r0, r5
 80036de:	4631      	mov	r1, r6
 80036e0:	f7fc fd72 	bl	80001c8 <__aeabi_uldivmod>
 80036e4:	4603      	mov	r3, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b77      	ldr	r3, [pc, #476]	; (80038c8 <UART_SetConfig+0x6f4>)
 80036ec:	fba3 1302 	umull	r1, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	2164      	movs	r1, #100	; 0x64
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	3332      	adds	r3, #50	; 0x32
 80036fe:	4a72      	ldr	r2, [pc, #456]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	f003 020f 	and.w	r2, r3, #15
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4442      	add	r2, r8
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	e0d0      	b.n	80038b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7fe fb6c 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8003718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	469a      	mov	sl, r3
 800371e:	f04f 0b00 	mov.w	fp, #0
 8003722:	46d0      	mov	r8, sl
 8003724:	46d9      	mov	r9, fp
 8003726:	eb18 0308 	adds.w	r3, r8, r8
 800372a:	eb49 0409 	adc.w	r4, r9, r9
 800372e:	4698      	mov	r8, r3
 8003730:	46a1      	mov	r9, r4
 8003732:	eb18 080a 	adds.w	r8, r8, sl
 8003736:	eb49 090b 	adc.w	r9, r9, fp
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800374a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800374e:	4688      	mov	r8, r1
 8003750:	4691      	mov	r9, r2
 8003752:	eb1a 0508 	adds.w	r5, sl, r8
 8003756:	eb4b 0609 	adc.w	r6, fp, r9
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4619      	mov	r1, r3
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	0094      	lsls	r4, r2, #2
 800376e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003772:	008b      	lsls	r3, r1, #2
 8003774:	461a      	mov	r2, r3
 8003776:	4623      	mov	r3, r4
 8003778:	4628      	mov	r0, r5
 800377a:	4631      	mov	r1, r6
 800377c:	f7fc fd24 	bl	80001c8 <__aeabi_uldivmod>
 8003780:	4603      	mov	r3, r0
 8003782:	460c      	mov	r4, r1
 8003784:	461a      	mov	r2, r3
 8003786:	4b50      	ldr	r3, [pc, #320]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003788:	fba3 2302 	umull	r2, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	469b      	mov	fp, r3
 8003796:	f04f 0c00 	mov.w	ip, #0
 800379a:	46d9      	mov	r9, fp
 800379c:	46e2      	mov	sl, ip
 800379e:	eb19 0309 	adds.w	r3, r9, r9
 80037a2:	eb4a 040a 	adc.w	r4, sl, sl
 80037a6:	4699      	mov	r9, r3
 80037a8:	46a2      	mov	sl, r4
 80037aa:	eb19 090b 	adds.w	r9, r9, fp
 80037ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037c6:	4689      	mov	r9, r1
 80037c8:	4692      	mov	sl, r2
 80037ca:	eb1b 0509 	adds.w	r5, fp, r9
 80037ce:	eb4c 060a 	adc.w	r6, ip, sl
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4619      	mov	r1, r3
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	0094      	lsls	r4, r2, #2
 80037e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ea:	008b      	lsls	r3, r1, #2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	4628      	mov	r0, r5
 80037f2:	4631      	mov	r1, r6
 80037f4:	f7fc fce8 	bl	80001c8 <__aeabi_uldivmod>
 80037f8:	4603      	mov	r3, r0
 80037fa:	460c      	mov	r4, r1
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003800:	fba3 1302 	umull	r1, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	2164      	movs	r1, #100	; 0x64
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	3332      	adds	r3, #50	; 0x32
 8003812:	4a2d      	ldr	r2, [pc, #180]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381e:	4498      	add	r8, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	469b      	mov	fp, r3
 8003824:	f04f 0c00 	mov.w	ip, #0
 8003828:	46d9      	mov	r9, fp
 800382a:	46e2      	mov	sl, ip
 800382c:	eb19 0309 	adds.w	r3, r9, r9
 8003830:	eb4a 040a 	adc.w	r4, sl, sl
 8003834:	4699      	mov	r9, r3
 8003836:	46a2      	mov	sl, r4
 8003838:	eb19 090b 	adds.w	r9, r9, fp
 800383c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003840:	f04f 0100 	mov.w	r1, #0
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800384c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003850:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003854:	4689      	mov	r9, r1
 8003856:	4692      	mov	sl, r2
 8003858:	eb1b 0509 	adds.w	r5, fp, r9
 800385c:	eb4c 060a 	adc.w	r6, ip, sl
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4619      	mov	r1, r3
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	f04f 0400 	mov.w	r4, #0
 8003872:	0094      	lsls	r4, r2, #2
 8003874:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003878:	008b      	lsls	r3, r1, #2
 800387a:	461a      	mov	r2, r3
 800387c:	4623      	mov	r3, r4
 800387e:	4628      	mov	r0, r5
 8003880:	4631      	mov	r1, r6
 8003882:	f7fc fca1 	bl	80001c8 <__aeabi_uldivmod>
 8003886:	4603      	mov	r3, r0
 8003888:	460c      	mov	r4, r1
 800388a:	461a      	mov	r2, r3
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <UART_SetConfig+0x6f4>)
 800388e:	fba3 1302 	umull	r1, r3, r3, r2
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2164      	movs	r1, #100	; 0x64
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	3332      	adds	r3, #50	; 0x32
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <UART_SetConfig+0x6f4>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 020f 	and.w	r2, r3, #15
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4442      	add	r2, r8
 80038b2:	609a      	str	r2, [r3, #8]
}
 80038b4:	e7ff      	b.n	80038b6 <UART_SetConfig+0x6e2>
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c0:	40011000 	.word	0x40011000
 80038c4:	40011400 	.word	0x40011400
 80038c8:	51eb851f 	.word	0x51eb851f

080038cc <__errno>:
 80038cc:	4b01      	ldr	r3, [pc, #4]	; (80038d4 <__errno+0x8>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	2000000c 	.word	0x2000000c

080038d8 <__libc_init_array>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	4e0d      	ldr	r6, [pc, #52]	; (8003910 <__libc_init_array+0x38>)
 80038dc:	4c0d      	ldr	r4, [pc, #52]	; (8003914 <__libc_init_array+0x3c>)
 80038de:	1ba4      	subs	r4, r4, r6
 80038e0:	10a4      	asrs	r4, r4, #2
 80038e2:	2500      	movs	r5, #0
 80038e4:	42a5      	cmp	r5, r4
 80038e6:	d109      	bne.n	80038fc <__libc_init_array+0x24>
 80038e8:	4e0b      	ldr	r6, [pc, #44]	; (8003918 <__libc_init_array+0x40>)
 80038ea:	4c0c      	ldr	r4, [pc, #48]	; (800391c <__libc_init_array+0x44>)
 80038ec:	f000 fc88 	bl	8004200 <_init>
 80038f0:	1ba4      	subs	r4, r4, r6
 80038f2:	10a4      	asrs	r4, r4, #2
 80038f4:	2500      	movs	r5, #0
 80038f6:	42a5      	cmp	r5, r4
 80038f8:	d105      	bne.n	8003906 <__libc_init_array+0x2e>
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003900:	4798      	blx	r3
 8003902:	3501      	adds	r5, #1
 8003904:	e7ee      	b.n	80038e4 <__libc_init_array+0xc>
 8003906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800390a:	4798      	blx	r3
 800390c:	3501      	adds	r5, #1
 800390e:	e7f2      	b.n	80038f6 <__libc_init_array+0x1e>
 8003910:	080042fc 	.word	0x080042fc
 8003914:	080042fc 	.word	0x080042fc
 8003918:	080042fc 	.word	0x080042fc
 800391c:	08004300 	.word	0x08004300

08003920 <memset>:
 8003920:	4402      	add	r2, r0
 8003922:	4603      	mov	r3, r0
 8003924:	4293      	cmp	r3, r2
 8003926:	d100      	bne.n	800392a <memset+0xa>
 8003928:	4770      	bx	lr
 800392a:	f803 1b01 	strb.w	r1, [r3], #1
 800392e:	e7f9      	b.n	8003924 <memset+0x4>

08003930 <_puts_r>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	460e      	mov	r6, r1
 8003934:	4605      	mov	r5, r0
 8003936:	b118      	cbz	r0, 8003940 <_puts_r+0x10>
 8003938:	6983      	ldr	r3, [r0, #24]
 800393a:	b90b      	cbnz	r3, 8003940 <_puts_r+0x10>
 800393c:	f000 fa0c 	bl	8003d58 <__sinit>
 8003940:	69ab      	ldr	r3, [r5, #24]
 8003942:	68ac      	ldr	r4, [r5, #8]
 8003944:	b913      	cbnz	r3, 800394c <_puts_r+0x1c>
 8003946:	4628      	mov	r0, r5
 8003948:	f000 fa06 	bl	8003d58 <__sinit>
 800394c:	4b23      	ldr	r3, [pc, #140]	; (80039dc <_puts_r+0xac>)
 800394e:	429c      	cmp	r4, r3
 8003950:	d117      	bne.n	8003982 <_puts_r+0x52>
 8003952:	686c      	ldr	r4, [r5, #4]
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	071b      	lsls	r3, r3, #28
 8003958:	d51d      	bpl.n	8003996 <_puts_r+0x66>
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	b1db      	cbz	r3, 8003996 <_puts_r+0x66>
 800395e:	3e01      	subs	r6, #1
 8003960:	68a3      	ldr	r3, [r4, #8]
 8003962:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003966:	3b01      	subs	r3, #1
 8003968:	60a3      	str	r3, [r4, #8]
 800396a:	b9e9      	cbnz	r1, 80039a8 <_puts_r+0x78>
 800396c:	2b00      	cmp	r3, #0
 800396e:	da2e      	bge.n	80039ce <_puts_r+0x9e>
 8003970:	4622      	mov	r2, r4
 8003972:	210a      	movs	r1, #10
 8003974:	4628      	mov	r0, r5
 8003976:	f000 f83f 	bl	80039f8 <__swbuf_r>
 800397a:	3001      	adds	r0, #1
 800397c:	d011      	beq.n	80039a2 <_puts_r+0x72>
 800397e:	200a      	movs	r0, #10
 8003980:	e011      	b.n	80039a6 <_puts_r+0x76>
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <_puts_r+0xb0>)
 8003984:	429c      	cmp	r4, r3
 8003986:	d101      	bne.n	800398c <_puts_r+0x5c>
 8003988:	68ac      	ldr	r4, [r5, #8]
 800398a:	e7e3      	b.n	8003954 <_puts_r+0x24>
 800398c:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <_puts_r+0xb4>)
 800398e:	429c      	cmp	r4, r3
 8003990:	bf08      	it	eq
 8003992:	68ec      	ldreq	r4, [r5, #12]
 8003994:	e7de      	b.n	8003954 <_puts_r+0x24>
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 f87f 	bl	8003a9c <__swsetup_r>
 800399e:	2800      	cmp	r0, #0
 80039a0:	d0dd      	beq.n	800395e <_puts_r+0x2e>
 80039a2:	f04f 30ff 	mov.w	r0, #4294967295
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da04      	bge.n	80039b6 <_puts_r+0x86>
 80039ac:	69a2      	ldr	r2, [r4, #24]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	dc06      	bgt.n	80039c0 <_puts_r+0x90>
 80039b2:	290a      	cmp	r1, #10
 80039b4:	d004      	beq.n	80039c0 <_puts_r+0x90>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	6022      	str	r2, [r4, #0]
 80039bc:	7019      	strb	r1, [r3, #0]
 80039be:	e7cf      	b.n	8003960 <_puts_r+0x30>
 80039c0:	4622      	mov	r2, r4
 80039c2:	4628      	mov	r0, r5
 80039c4:	f000 f818 	bl	80039f8 <__swbuf_r>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d1c9      	bne.n	8003960 <_puts_r+0x30>
 80039cc:	e7e9      	b.n	80039a2 <_puts_r+0x72>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	200a      	movs	r0, #10
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	6022      	str	r2, [r4, #0]
 80039d6:	7018      	strb	r0, [r3, #0]
 80039d8:	e7e5      	b.n	80039a6 <_puts_r+0x76>
 80039da:	bf00      	nop
 80039dc:	080042b4 	.word	0x080042b4
 80039e0:	080042d4 	.word	0x080042d4
 80039e4:	08004294 	.word	0x08004294

080039e8 <puts>:
 80039e8:	4b02      	ldr	r3, [pc, #8]	; (80039f4 <puts+0xc>)
 80039ea:	4601      	mov	r1, r0
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	f7ff bf9f 	b.w	8003930 <_puts_r>
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c

080039f8 <__swbuf_r>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	460e      	mov	r6, r1
 80039fc:	4614      	mov	r4, r2
 80039fe:	4605      	mov	r5, r0
 8003a00:	b118      	cbz	r0, 8003a0a <__swbuf_r+0x12>
 8003a02:	6983      	ldr	r3, [r0, #24]
 8003a04:	b90b      	cbnz	r3, 8003a0a <__swbuf_r+0x12>
 8003a06:	f000 f9a7 	bl	8003d58 <__sinit>
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <__swbuf_r+0x98>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	d12a      	bne.n	8003a66 <__swbuf_r+0x6e>
 8003a10:	686c      	ldr	r4, [r5, #4]
 8003a12:	69a3      	ldr	r3, [r4, #24]
 8003a14:	60a3      	str	r3, [r4, #8]
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	071a      	lsls	r2, r3, #28
 8003a1a:	d52e      	bpl.n	8003a7a <__swbuf_r+0x82>
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	b363      	cbz	r3, 8003a7a <__swbuf_r+0x82>
 8003a20:	6923      	ldr	r3, [r4, #16]
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	1ac0      	subs	r0, r0, r3
 8003a26:	6963      	ldr	r3, [r4, #20]
 8003a28:	b2f6      	uxtb	r6, r6
 8003a2a:	4283      	cmp	r3, r0
 8003a2c:	4637      	mov	r7, r6
 8003a2e:	dc04      	bgt.n	8003a3a <__swbuf_r+0x42>
 8003a30:	4621      	mov	r1, r4
 8003a32:	4628      	mov	r0, r5
 8003a34:	f000 f926 	bl	8003c84 <_fflush_r>
 8003a38:	bb28      	cbnz	r0, 8003a86 <__swbuf_r+0x8e>
 8003a3a:	68a3      	ldr	r3, [r4, #8]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	60a3      	str	r3, [r4, #8]
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	6022      	str	r2, [r4, #0]
 8003a46:	701e      	strb	r6, [r3, #0]
 8003a48:	6963      	ldr	r3, [r4, #20]
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	4283      	cmp	r3, r0
 8003a4e:	d004      	beq.n	8003a5a <__swbuf_r+0x62>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	07db      	lsls	r3, r3, #31
 8003a54:	d519      	bpl.n	8003a8a <__swbuf_r+0x92>
 8003a56:	2e0a      	cmp	r6, #10
 8003a58:	d117      	bne.n	8003a8a <__swbuf_r+0x92>
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	f000 f911 	bl	8003c84 <_fflush_r>
 8003a62:	b190      	cbz	r0, 8003a8a <__swbuf_r+0x92>
 8003a64:	e00f      	b.n	8003a86 <__swbuf_r+0x8e>
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <__swbuf_r+0x9c>)
 8003a68:	429c      	cmp	r4, r3
 8003a6a:	d101      	bne.n	8003a70 <__swbuf_r+0x78>
 8003a6c:	68ac      	ldr	r4, [r5, #8]
 8003a6e:	e7d0      	b.n	8003a12 <__swbuf_r+0x1a>
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <__swbuf_r+0xa0>)
 8003a72:	429c      	cmp	r4, r3
 8003a74:	bf08      	it	eq
 8003a76:	68ec      	ldreq	r4, [r5, #12]
 8003a78:	e7cb      	b.n	8003a12 <__swbuf_r+0x1a>
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f000 f80d 	bl	8003a9c <__swsetup_r>
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d0cc      	beq.n	8003a20 <__swbuf_r+0x28>
 8003a86:	f04f 37ff 	mov.w	r7, #4294967295
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	080042b4 	.word	0x080042b4
 8003a94:	080042d4 	.word	0x080042d4
 8003a98:	08004294 	.word	0x08004294

08003a9c <__swsetup_r>:
 8003a9c:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <__swsetup_r+0xcc>)
 8003a9e:	b570      	push	{r4, r5, r6, lr}
 8003aa0:	681d      	ldr	r5, [r3, #0]
 8003aa2:	4606      	mov	r6, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	b125      	cbz	r5, 8003ab2 <__swsetup_r+0x16>
 8003aa8:	69ab      	ldr	r3, [r5, #24]
 8003aaa:	b913      	cbnz	r3, 8003ab2 <__swsetup_r+0x16>
 8003aac:	4628      	mov	r0, r5
 8003aae:	f000 f953 	bl	8003d58 <__sinit>
 8003ab2:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <__swsetup_r+0xd0>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	d10f      	bne.n	8003ad8 <__swsetup_r+0x3c>
 8003ab8:	686c      	ldr	r4, [r5, #4]
 8003aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	0715      	lsls	r5, r2, #28
 8003ac2:	d42c      	bmi.n	8003b1e <__swsetup_r+0x82>
 8003ac4:	06d0      	lsls	r0, r2, #27
 8003ac6:	d411      	bmi.n	8003aec <__swsetup_r+0x50>
 8003ac8:	2209      	movs	r2, #9
 8003aca:	6032      	str	r2, [r6, #0]
 8003acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	e03e      	b.n	8003b56 <__swsetup_r+0xba>
 8003ad8:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <__swsetup_r+0xd4>)
 8003ada:	429c      	cmp	r4, r3
 8003adc:	d101      	bne.n	8003ae2 <__swsetup_r+0x46>
 8003ade:	68ac      	ldr	r4, [r5, #8]
 8003ae0:	e7eb      	b.n	8003aba <__swsetup_r+0x1e>
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <__swsetup_r+0xd8>)
 8003ae4:	429c      	cmp	r4, r3
 8003ae6:	bf08      	it	eq
 8003ae8:	68ec      	ldreq	r4, [r5, #12]
 8003aea:	e7e6      	b.n	8003aba <__swsetup_r+0x1e>
 8003aec:	0751      	lsls	r1, r2, #29
 8003aee:	d512      	bpl.n	8003b16 <__swsetup_r+0x7a>
 8003af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003af2:	b141      	cbz	r1, 8003b06 <__swsetup_r+0x6a>
 8003af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003af8:	4299      	cmp	r1, r3
 8003afa:	d002      	beq.n	8003b02 <__swsetup_r+0x66>
 8003afc:	4630      	mov	r0, r6
 8003afe:	f000 fa19 	bl	8003f34 <_free_r>
 8003b02:	2300      	movs	r3, #0
 8003b04:	6363      	str	r3, [r4, #52]	; 0x34
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	6063      	str	r3, [r4, #4]
 8003b12:	6923      	ldr	r3, [r4, #16]
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	f043 0308 	orr.w	r3, r3, #8
 8003b1c:	81a3      	strh	r3, [r4, #12]
 8003b1e:	6923      	ldr	r3, [r4, #16]
 8003b20:	b94b      	cbnz	r3, 8003b36 <__swsetup_r+0x9a>
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2c:	d003      	beq.n	8003b36 <__swsetup_r+0x9a>
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 f9bf 	bl	8003eb4 <__smakebuf_r>
 8003b36:	89a2      	ldrh	r2, [r4, #12]
 8003b38:	f012 0301 	ands.w	r3, r2, #1
 8003b3c:	d00c      	beq.n	8003b58 <__swsetup_r+0xbc>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60a3      	str	r3, [r4, #8]
 8003b42:	6963      	ldr	r3, [r4, #20]
 8003b44:	425b      	negs	r3, r3
 8003b46:	61a3      	str	r3, [r4, #24]
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	b953      	cbnz	r3, 8003b62 <__swsetup_r+0xc6>
 8003b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003b54:	d1ba      	bne.n	8003acc <__swsetup_r+0x30>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	0792      	lsls	r2, r2, #30
 8003b5a:	bf58      	it	pl
 8003b5c:	6963      	ldrpl	r3, [r4, #20]
 8003b5e:	60a3      	str	r3, [r4, #8]
 8003b60:	e7f2      	b.n	8003b48 <__swsetup_r+0xac>
 8003b62:	2000      	movs	r0, #0
 8003b64:	e7f7      	b.n	8003b56 <__swsetup_r+0xba>
 8003b66:	bf00      	nop
 8003b68:	2000000c 	.word	0x2000000c
 8003b6c:	080042b4 	.word	0x080042b4
 8003b70:	080042d4 	.word	0x080042d4
 8003b74:	08004294 	.word	0x08004294

08003b78 <__sflush_r>:
 8003b78:	898a      	ldrh	r2, [r1, #12]
 8003b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7e:	4605      	mov	r5, r0
 8003b80:	0710      	lsls	r0, r2, #28
 8003b82:	460c      	mov	r4, r1
 8003b84:	d458      	bmi.n	8003c38 <__sflush_r+0xc0>
 8003b86:	684b      	ldr	r3, [r1, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	dc05      	bgt.n	8003b98 <__sflush_r+0x20>
 8003b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	dc02      	bgt.n	8003b98 <__sflush_r+0x20>
 8003b92:	2000      	movs	r0, #0
 8003b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b9a:	2e00      	cmp	r6, #0
 8003b9c:	d0f9      	beq.n	8003b92 <__sflush_r+0x1a>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ba4:	682f      	ldr	r7, [r5, #0]
 8003ba6:	6a21      	ldr	r1, [r4, #32]
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	d032      	beq.n	8003c12 <__sflush_r+0x9a>
 8003bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	075a      	lsls	r2, r3, #29
 8003bb2:	d505      	bpl.n	8003bc0 <__sflush_r+0x48>
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	1ac0      	subs	r0, r0, r3
 8003bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bba:	b10b      	cbz	r3, 8003bc0 <__sflush_r+0x48>
 8003bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bbe:	1ac0      	subs	r0, r0, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bc6:	6a21      	ldr	r1, [r4, #32]
 8003bc8:	4628      	mov	r0, r5
 8003bca:	47b0      	blx	r6
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	d106      	bne.n	8003be0 <__sflush_r+0x68>
 8003bd2:	6829      	ldr	r1, [r5, #0]
 8003bd4:	291d      	cmp	r1, #29
 8003bd6:	d848      	bhi.n	8003c6a <__sflush_r+0xf2>
 8003bd8:	4a29      	ldr	r2, [pc, #164]	; (8003c80 <__sflush_r+0x108>)
 8003bda:	40ca      	lsrs	r2, r1
 8003bdc:	07d6      	lsls	r6, r2, #31
 8003bde:	d544      	bpl.n	8003c6a <__sflush_r+0xf2>
 8003be0:	2200      	movs	r2, #0
 8003be2:	6062      	str	r2, [r4, #4]
 8003be4:	04d9      	lsls	r1, r3, #19
 8003be6:	6922      	ldr	r2, [r4, #16]
 8003be8:	6022      	str	r2, [r4, #0]
 8003bea:	d504      	bpl.n	8003bf6 <__sflush_r+0x7e>
 8003bec:	1c42      	adds	r2, r0, #1
 8003bee:	d101      	bne.n	8003bf4 <__sflush_r+0x7c>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b903      	cbnz	r3, 8003bf6 <__sflush_r+0x7e>
 8003bf4:	6560      	str	r0, [r4, #84]	; 0x54
 8003bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bf8:	602f      	str	r7, [r5, #0]
 8003bfa:	2900      	cmp	r1, #0
 8003bfc:	d0c9      	beq.n	8003b92 <__sflush_r+0x1a>
 8003bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c02:	4299      	cmp	r1, r3
 8003c04:	d002      	beq.n	8003c0c <__sflush_r+0x94>
 8003c06:	4628      	mov	r0, r5
 8003c08:	f000 f994 	bl	8003f34 <_free_r>
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	6360      	str	r0, [r4, #52]	; 0x34
 8003c10:	e7c0      	b.n	8003b94 <__sflush_r+0x1c>
 8003c12:	2301      	movs	r3, #1
 8003c14:	4628      	mov	r0, r5
 8003c16:	47b0      	blx	r6
 8003c18:	1c41      	adds	r1, r0, #1
 8003c1a:	d1c8      	bne.n	8003bae <__sflush_r+0x36>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0c5      	beq.n	8003bae <__sflush_r+0x36>
 8003c22:	2b1d      	cmp	r3, #29
 8003c24:	d001      	beq.n	8003c2a <__sflush_r+0xb2>
 8003c26:	2b16      	cmp	r3, #22
 8003c28:	d101      	bne.n	8003c2e <__sflush_r+0xb6>
 8003c2a:	602f      	str	r7, [r5, #0]
 8003c2c:	e7b1      	b.n	8003b92 <__sflush_r+0x1a>
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	e7ad      	b.n	8003b94 <__sflush_r+0x1c>
 8003c38:	690f      	ldr	r7, [r1, #16]
 8003c3a:	2f00      	cmp	r7, #0
 8003c3c:	d0a9      	beq.n	8003b92 <__sflush_r+0x1a>
 8003c3e:	0793      	lsls	r3, r2, #30
 8003c40:	680e      	ldr	r6, [r1, #0]
 8003c42:	bf08      	it	eq
 8003c44:	694b      	ldreq	r3, [r1, #20]
 8003c46:	600f      	str	r7, [r1, #0]
 8003c48:	bf18      	it	ne
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	eba6 0807 	sub.w	r8, r6, r7
 8003c50:	608b      	str	r3, [r1, #8]
 8003c52:	f1b8 0f00 	cmp.w	r8, #0
 8003c56:	dd9c      	ble.n	8003b92 <__sflush_r+0x1a>
 8003c58:	4643      	mov	r3, r8
 8003c5a:	463a      	mov	r2, r7
 8003c5c:	6a21      	ldr	r1, [r4, #32]
 8003c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c60:	4628      	mov	r0, r5
 8003c62:	47b0      	blx	r6
 8003c64:	2800      	cmp	r0, #0
 8003c66:	dc06      	bgt.n	8003c76 <__sflush_r+0xfe>
 8003c68:	89a3      	ldrh	r3, [r4, #12]
 8003c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c6e:	81a3      	strh	r3, [r4, #12]
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	e78e      	b.n	8003b94 <__sflush_r+0x1c>
 8003c76:	4407      	add	r7, r0
 8003c78:	eba8 0800 	sub.w	r8, r8, r0
 8003c7c:	e7e9      	b.n	8003c52 <__sflush_r+0xda>
 8003c7e:	bf00      	nop
 8003c80:	20400001 	.word	0x20400001

08003c84 <_fflush_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	690b      	ldr	r3, [r1, #16]
 8003c88:	4605      	mov	r5, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	b1db      	cbz	r3, 8003cc6 <_fflush_r+0x42>
 8003c8e:	b118      	cbz	r0, 8003c98 <_fflush_r+0x14>
 8003c90:	6983      	ldr	r3, [r0, #24]
 8003c92:	b90b      	cbnz	r3, 8003c98 <_fflush_r+0x14>
 8003c94:	f000 f860 	bl	8003d58 <__sinit>
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <_fflush_r+0x48>)
 8003c9a:	429c      	cmp	r4, r3
 8003c9c:	d109      	bne.n	8003cb2 <_fflush_r+0x2e>
 8003c9e:	686c      	ldr	r4, [r5, #4]
 8003ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca4:	b17b      	cbz	r3, 8003cc6 <_fflush_r+0x42>
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	4628      	mov	r0, r5
 8003caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cae:	f7ff bf63 	b.w	8003b78 <__sflush_r>
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <_fflush_r+0x4c>)
 8003cb4:	429c      	cmp	r4, r3
 8003cb6:	d101      	bne.n	8003cbc <_fflush_r+0x38>
 8003cb8:	68ac      	ldr	r4, [r5, #8]
 8003cba:	e7f1      	b.n	8003ca0 <_fflush_r+0x1c>
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <_fflush_r+0x50>)
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	bf08      	it	eq
 8003cc2:	68ec      	ldreq	r4, [r5, #12]
 8003cc4:	e7ec      	b.n	8003ca0 <_fflush_r+0x1c>
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
 8003cca:	bf00      	nop
 8003ccc:	080042b4 	.word	0x080042b4
 8003cd0:	080042d4 	.word	0x080042d4
 8003cd4:	08004294 	.word	0x08004294

08003cd8 <std>:
 8003cd8:	2300      	movs	r3, #0
 8003cda:	b510      	push	{r4, lr}
 8003cdc:	4604      	mov	r4, r0
 8003cde:	e9c0 3300 	strd	r3, r3, [r0]
 8003ce2:	6083      	str	r3, [r0, #8]
 8003ce4:	8181      	strh	r1, [r0, #12]
 8003ce6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ce8:	81c2      	strh	r2, [r0, #14]
 8003cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cee:	6183      	str	r3, [r0, #24]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	305c      	adds	r0, #92	; 0x5c
 8003cf6:	f7ff fe13 	bl	8003920 <memset>
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <std+0x38>)
 8003cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <std+0x3c>)
 8003d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <std+0x40>)
 8003d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <std+0x44>)
 8003d08:	6224      	str	r4, [r4, #32]
 8003d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	bf00      	nop
 8003d10:	080040a5 	.word	0x080040a5
 8003d14:	080040c7 	.word	0x080040c7
 8003d18:	080040ff 	.word	0x080040ff
 8003d1c:	08004123 	.word	0x08004123

08003d20 <_cleanup_r>:
 8003d20:	4901      	ldr	r1, [pc, #4]	; (8003d28 <_cleanup_r+0x8>)
 8003d22:	f000 b885 	b.w	8003e30 <_fwalk_reent>
 8003d26:	bf00      	nop
 8003d28:	08003c85 	.word	0x08003c85

08003d2c <__sfmoreglue>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	1e4a      	subs	r2, r1, #1
 8003d30:	2568      	movs	r5, #104	; 0x68
 8003d32:	4355      	muls	r5, r2
 8003d34:	460e      	mov	r6, r1
 8003d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d3a:	f000 f949 	bl	8003fd0 <_malloc_r>
 8003d3e:	4604      	mov	r4, r0
 8003d40:	b140      	cbz	r0, 8003d54 <__sfmoreglue+0x28>
 8003d42:	2100      	movs	r1, #0
 8003d44:	e9c0 1600 	strd	r1, r6, [r0]
 8003d48:	300c      	adds	r0, #12
 8003d4a:	60a0      	str	r0, [r4, #8]
 8003d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d50:	f7ff fde6 	bl	8003920 <memset>
 8003d54:	4620      	mov	r0, r4
 8003d56:	bd70      	pop	{r4, r5, r6, pc}

08003d58 <__sinit>:
 8003d58:	6983      	ldr	r3, [r0, #24]
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	bb33      	cbnz	r3, 8003dae <__sinit+0x56>
 8003d60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003d64:	6503      	str	r3, [r0, #80]	; 0x50
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <__sinit+0x58>)
 8003d68:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <__sinit+0x5c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6282      	str	r2, [r0, #40]	; 0x28
 8003d6e:	4298      	cmp	r0, r3
 8003d70:	bf04      	itt	eq
 8003d72:	2301      	moveq	r3, #1
 8003d74:	6183      	streq	r3, [r0, #24]
 8003d76:	f000 f81f 	bl	8003db8 <__sfp>
 8003d7a:	6060      	str	r0, [r4, #4]
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f000 f81b 	bl	8003db8 <__sfp>
 8003d82:	60a0      	str	r0, [r4, #8]
 8003d84:	4620      	mov	r0, r4
 8003d86:	f000 f817 	bl	8003db8 <__sfp>
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60e0      	str	r0, [r4, #12]
 8003d8e:	2104      	movs	r1, #4
 8003d90:	6860      	ldr	r0, [r4, #4]
 8003d92:	f7ff ffa1 	bl	8003cd8 <std>
 8003d96:	2201      	movs	r2, #1
 8003d98:	2109      	movs	r1, #9
 8003d9a:	68a0      	ldr	r0, [r4, #8]
 8003d9c:	f7ff ff9c 	bl	8003cd8 <std>
 8003da0:	2202      	movs	r2, #2
 8003da2:	2112      	movs	r1, #18
 8003da4:	68e0      	ldr	r0, [r4, #12]
 8003da6:	f7ff ff97 	bl	8003cd8 <std>
 8003daa:	2301      	movs	r3, #1
 8003dac:	61a3      	str	r3, [r4, #24]
 8003dae:	bd10      	pop	{r4, pc}
 8003db0:	08004290 	.word	0x08004290
 8003db4:	08003d21 	.word	0x08003d21

08003db8 <__sfp>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <__sfp+0x70>)
 8003dbc:	681e      	ldr	r6, [r3, #0]
 8003dbe:	69b3      	ldr	r3, [r6, #24]
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	b913      	cbnz	r3, 8003dca <__sfp+0x12>
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	f7ff ffc7 	bl	8003d58 <__sinit>
 8003dca:	3648      	adds	r6, #72	; 0x48
 8003dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	d503      	bpl.n	8003ddc <__sfp+0x24>
 8003dd4:	6833      	ldr	r3, [r6, #0]
 8003dd6:	b133      	cbz	r3, 8003de6 <__sfp+0x2e>
 8003dd8:	6836      	ldr	r6, [r6, #0]
 8003dda:	e7f7      	b.n	8003dcc <__sfp+0x14>
 8003ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003de0:	b16d      	cbz	r5, 8003dfe <__sfp+0x46>
 8003de2:	3468      	adds	r4, #104	; 0x68
 8003de4:	e7f4      	b.n	8003dd0 <__sfp+0x18>
 8003de6:	2104      	movs	r1, #4
 8003de8:	4638      	mov	r0, r7
 8003dea:	f7ff ff9f 	bl	8003d2c <__sfmoreglue>
 8003dee:	6030      	str	r0, [r6, #0]
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d1f1      	bne.n	8003dd8 <__sfp+0x20>
 8003df4:	230c      	movs	r3, #12
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4604      	mov	r4, r0
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <__sfp+0x74>)
 8003e00:	6665      	str	r5, [r4, #100]	; 0x64
 8003e02:	e9c4 5500 	strd	r5, r5, [r4]
 8003e06:	60a5      	str	r5, [r4, #8]
 8003e08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e10:	2208      	movs	r2, #8
 8003e12:	4629      	mov	r1, r5
 8003e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e18:	f7ff fd82 	bl	8003920 <memset>
 8003e1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e24:	e7e9      	b.n	8003dfa <__sfp+0x42>
 8003e26:	bf00      	nop
 8003e28:	08004290 	.word	0x08004290
 8003e2c:	ffff0001 	.word	0xffff0001

08003e30 <_fwalk_reent>:
 8003e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e34:	4680      	mov	r8, r0
 8003e36:	4689      	mov	r9, r1
 8003e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	b914      	cbnz	r4, 8003e46 <_fwalk_reent+0x16>
 8003e40:	4630      	mov	r0, r6
 8003e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003e4a:	3f01      	subs	r7, #1
 8003e4c:	d501      	bpl.n	8003e52 <_fwalk_reent+0x22>
 8003e4e:	6824      	ldr	r4, [r4, #0]
 8003e50:	e7f5      	b.n	8003e3e <_fwalk_reent+0xe>
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d907      	bls.n	8003e68 <_fwalk_reent+0x38>
 8003e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	d003      	beq.n	8003e68 <_fwalk_reent+0x38>
 8003e60:	4629      	mov	r1, r5
 8003e62:	4640      	mov	r0, r8
 8003e64:	47c8      	blx	r9
 8003e66:	4306      	orrs	r6, r0
 8003e68:	3568      	adds	r5, #104	; 0x68
 8003e6a:	e7ee      	b.n	8003e4a <_fwalk_reent+0x1a>

08003e6c <__swhatbuf_r>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	460e      	mov	r6, r1
 8003e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e74:	2900      	cmp	r1, #0
 8003e76:	b096      	sub	sp, #88	; 0x58
 8003e78:	4614      	mov	r4, r2
 8003e7a:	461d      	mov	r5, r3
 8003e7c:	da07      	bge.n	8003e8e <__swhatbuf_r+0x22>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	89b3      	ldrh	r3, [r6, #12]
 8003e84:	061a      	lsls	r2, r3, #24
 8003e86:	d410      	bmi.n	8003eaa <__swhatbuf_r+0x3e>
 8003e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8c:	e00e      	b.n	8003eac <__swhatbuf_r+0x40>
 8003e8e:	466a      	mov	r2, sp
 8003e90:	f000 f96e 	bl	8004170 <_fstat_r>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	dbf2      	blt.n	8003e7e <__swhatbuf_r+0x12>
 8003e98:	9a01      	ldr	r2, [sp, #4]
 8003e9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ea2:	425a      	negs	r2, r3
 8003ea4:	415a      	adcs	r2, r3
 8003ea6:	602a      	str	r2, [r5, #0]
 8003ea8:	e7ee      	b.n	8003e88 <__swhatbuf_r+0x1c>
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	2000      	movs	r0, #0
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	b016      	add	sp, #88	; 0x58
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}

08003eb4 <__smakebuf_r>:
 8003eb4:	898b      	ldrh	r3, [r1, #12]
 8003eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003eb8:	079d      	lsls	r5, r3, #30
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	d507      	bpl.n	8003ed0 <__smakebuf_r+0x1c>
 8003ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6163      	str	r3, [r4, #20]
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	ab01      	add	r3, sp, #4
 8003ed2:	466a      	mov	r2, sp
 8003ed4:	f7ff ffca 	bl	8003e6c <__swhatbuf_r>
 8003ed8:	9900      	ldr	r1, [sp, #0]
 8003eda:	4605      	mov	r5, r0
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f877 	bl	8003fd0 <_malloc_r>
 8003ee2:	b948      	cbnz	r0, 8003ef8 <__smakebuf_r+0x44>
 8003ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee8:	059a      	lsls	r2, r3, #22
 8003eea:	d4ef      	bmi.n	8003ecc <__smakebuf_r+0x18>
 8003eec:	f023 0303 	bic.w	r3, r3, #3
 8003ef0:	f043 0302 	orr.w	r3, r3, #2
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	e7e3      	b.n	8003ec0 <__smakebuf_r+0xc>
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <__smakebuf_r+0x7c>)
 8003efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	6020      	str	r0, [r4, #0]
 8003f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	9b00      	ldr	r3, [sp, #0]
 8003f08:	6163      	str	r3, [r4, #20]
 8003f0a:	9b01      	ldr	r3, [sp, #4]
 8003f0c:	6120      	str	r0, [r4, #16]
 8003f0e:	b15b      	cbz	r3, 8003f28 <__smakebuf_r+0x74>
 8003f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f14:	4630      	mov	r0, r6
 8003f16:	f000 f93d 	bl	8004194 <_isatty_r>
 8003f1a:	b128      	cbz	r0, 8003f28 <__smakebuf_r+0x74>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	431d      	orrs	r5, r3
 8003f2c:	81a5      	strh	r5, [r4, #12]
 8003f2e:	e7cd      	b.n	8003ecc <__smakebuf_r+0x18>
 8003f30:	08003d21 	.word	0x08003d21

08003f34 <_free_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4605      	mov	r5, r0
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	d045      	beq.n	8003fc8 <_free_r+0x94>
 8003f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f40:	1f0c      	subs	r4, r1, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bfb8      	it	lt
 8003f46:	18e4      	addlt	r4, r4, r3
 8003f48:	f000 f946 	bl	80041d8 <__malloc_lock>
 8003f4c:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <_free_r+0x98>)
 8003f4e:	6813      	ldr	r3, [r2, #0]
 8003f50:	4610      	mov	r0, r2
 8003f52:	b933      	cbnz	r3, 8003f62 <_free_r+0x2e>
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	6014      	str	r4, [r2, #0]
 8003f58:	4628      	mov	r0, r5
 8003f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f5e:	f000 b93c 	b.w	80041da <__malloc_unlock>
 8003f62:	42a3      	cmp	r3, r4
 8003f64:	d90c      	bls.n	8003f80 <_free_r+0x4c>
 8003f66:	6821      	ldr	r1, [r4, #0]
 8003f68:	1862      	adds	r2, r4, r1
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	bf04      	itt	eq
 8003f6e:	681a      	ldreq	r2, [r3, #0]
 8003f70:	685b      	ldreq	r3, [r3, #4]
 8003f72:	6063      	str	r3, [r4, #4]
 8003f74:	bf04      	itt	eq
 8003f76:	1852      	addeq	r2, r2, r1
 8003f78:	6022      	streq	r2, [r4, #0]
 8003f7a:	6004      	str	r4, [r0, #0]
 8003f7c:	e7ec      	b.n	8003f58 <_free_r+0x24>
 8003f7e:	4613      	mov	r3, r2
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	b10a      	cbz	r2, 8003f88 <_free_r+0x54>
 8003f84:	42a2      	cmp	r2, r4
 8003f86:	d9fa      	bls.n	8003f7e <_free_r+0x4a>
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	1858      	adds	r0, r3, r1
 8003f8c:	42a0      	cmp	r0, r4
 8003f8e:	d10b      	bne.n	8003fa8 <_free_r+0x74>
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	4401      	add	r1, r0
 8003f94:	1858      	adds	r0, r3, r1
 8003f96:	4282      	cmp	r2, r0
 8003f98:	6019      	str	r1, [r3, #0]
 8003f9a:	d1dd      	bne.n	8003f58 <_free_r+0x24>
 8003f9c:	6810      	ldr	r0, [r2, #0]
 8003f9e:	6852      	ldr	r2, [r2, #4]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	4401      	add	r1, r0
 8003fa4:	6019      	str	r1, [r3, #0]
 8003fa6:	e7d7      	b.n	8003f58 <_free_r+0x24>
 8003fa8:	d902      	bls.n	8003fb0 <_free_r+0x7c>
 8003faa:	230c      	movs	r3, #12
 8003fac:	602b      	str	r3, [r5, #0]
 8003fae:	e7d3      	b.n	8003f58 <_free_r+0x24>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	1821      	adds	r1, r4, r0
 8003fb4:	428a      	cmp	r2, r1
 8003fb6:	bf04      	itt	eq
 8003fb8:	6811      	ldreq	r1, [r2, #0]
 8003fba:	6852      	ldreq	r2, [r2, #4]
 8003fbc:	6062      	str	r2, [r4, #4]
 8003fbe:	bf04      	itt	eq
 8003fc0:	1809      	addeq	r1, r1, r0
 8003fc2:	6021      	streq	r1, [r4, #0]
 8003fc4:	605c      	str	r4, [r3, #4]
 8003fc6:	e7c7      	b.n	8003f58 <_free_r+0x24>
 8003fc8:	bd38      	pop	{r3, r4, r5, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000098 	.word	0x20000098

08003fd0 <_malloc_r>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	1ccd      	adds	r5, r1, #3
 8003fd4:	f025 0503 	bic.w	r5, r5, #3
 8003fd8:	3508      	adds	r5, #8
 8003fda:	2d0c      	cmp	r5, #12
 8003fdc:	bf38      	it	cc
 8003fde:	250c      	movcc	r5, #12
 8003fe0:	2d00      	cmp	r5, #0
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	db01      	blt.n	8003fea <_malloc_r+0x1a>
 8003fe6:	42a9      	cmp	r1, r5
 8003fe8:	d903      	bls.n	8003ff2 <_malloc_r+0x22>
 8003fea:	230c      	movs	r3, #12
 8003fec:	6033      	str	r3, [r6, #0]
 8003fee:	2000      	movs	r0, #0
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
 8003ff2:	f000 f8f1 	bl	80041d8 <__malloc_lock>
 8003ff6:	4a21      	ldr	r2, [pc, #132]	; (800407c <_malloc_r+0xac>)
 8003ff8:	6814      	ldr	r4, [r2, #0]
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	b991      	cbnz	r1, 8004024 <_malloc_r+0x54>
 8003ffe:	4c20      	ldr	r4, [pc, #128]	; (8004080 <_malloc_r+0xb0>)
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	b91b      	cbnz	r3, 800400c <_malloc_r+0x3c>
 8004004:	4630      	mov	r0, r6
 8004006:	f000 f83d 	bl	8004084 <_sbrk_r>
 800400a:	6020      	str	r0, [r4, #0]
 800400c:	4629      	mov	r1, r5
 800400e:	4630      	mov	r0, r6
 8004010:	f000 f838 	bl	8004084 <_sbrk_r>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d124      	bne.n	8004062 <_malloc_r+0x92>
 8004018:	230c      	movs	r3, #12
 800401a:	6033      	str	r3, [r6, #0]
 800401c:	4630      	mov	r0, r6
 800401e:	f000 f8dc 	bl	80041da <__malloc_unlock>
 8004022:	e7e4      	b.n	8003fee <_malloc_r+0x1e>
 8004024:	680b      	ldr	r3, [r1, #0]
 8004026:	1b5b      	subs	r3, r3, r5
 8004028:	d418      	bmi.n	800405c <_malloc_r+0x8c>
 800402a:	2b0b      	cmp	r3, #11
 800402c:	d90f      	bls.n	800404e <_malloc_r+0x7e>
 800402e:	600b      	str	r3, [r1, #0]
 8004030:	50cd      	str	r5, [r1, r3]
 8004032:	18cc      	adds	r4, r1, r3
 8004034:	4630      	mov	r0, r6
 8004036:	f000 f8d0 	bl	80041da <__malloc_unlock>
 800403a:	f104 000b 	add.w	r0, r4, #11
 800403e:	1d23      	adds	r3, r4, #4
 8004040:	f020 0007 	bic.w	r0, r0, #7
 8004044:	1ac3      	subs	r3, r0, r3
 8004046:	d0d3      	beq.n	8003ff0 <_malloc_r+0x20>
 8004048:	425a      	negs	r2, r3
 800404a:	50e2      	str	r2, [r4, r3]
 800404c:	e7d0      	b.n	8003ff0 <_malloc_r+0x20>
 800404e:	428c      	cmp	r4, r1
 8004050:	684b      	ldr	r3, [r1, #4]
 8004052:	bf16      	itet	ne
 8004054:	6063      	strne	r3, [r4, #4]
 8004056:	6013      	streq	r3, [r2, #0]
 8004058:	460c      	movne	r4, r1
 800405a:	e7eb      	b.n	8004034 <_malloc_r+0x64>
 800405c:	460c      	mov	r4, r1
 800405e:	6849      	ldr	r1, [r1, #4]
 8004060:	e7cc      	b.n	8003ffc <_malloc_r+0x2c>
 8004062:	1cc4      	adds	r4, r0, #3
 8004064:	f024 0403 	bic.w	r4, r4, #3
 8004068:	42a0      	cmp	r0, r4
 800406a:	d005      	beq.n	8004078 <_malloc_r+0xa8>
 800406c:	1a21      	subs	r1, r4, r0
 800406e:	4630      	mov	r0, r6
 8004070:	f000 f808 	bl	8004084 <_sbrk_r>
 8004074:	3001      	adds	r0, #1
 8004076:	d0cf      	beq.n	8004018 <_malloc_r+0x48>
 8004078:	6025      	str	r5, [r4, #0]
 800407a:	e7db      	b.n	8004034 <_malloc_r+0x64>
 800407c:	20000098 	.word	0x20000098
 8004080:	2000009c 	.word	0x2000009c

08004084 <_sbrk_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4c06      	ldr	r4, [pc, #24]	; (80040a0 <_sbrk_r+0x1c>)
 8004088:	2300      	movs	r3, #0
 800408a:	4605      	mov	r5, r0
 800408c:	4608      	mov	r0, r1
 800408e:	6023      	str	r3, [r4, #0]
 8004090:	f7fc fcdc 	bl	8000a4c <_sbrk>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_sbrk_r+0x1a>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	b103      	cbz	r3, 800409e <_sbrk_r+0x1a>
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	20000168 	.word	0x20000168

080040a4 <__sread>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	460c      	mov	r4, r1
 80040a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ac:	f000 f896 	bl	80041dc <_read_r>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	bfab      	itete	ge
 80040b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040b6:	89a3      	ldrhlt	r3, [r4, #12]
 80040b8:	181b      	addge	r3, r3, r0
 80040ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040be:	bfac      	ite	ge
 80040c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80040c2:	81a3      	strhlt	r3, [r4, #12]
 80040c4:	bd10      	pop	{r4, pc}

080040c6 <__swrite>:
 80040c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ca:	461f      	mov	r7, r3
 80040cc:	898b      	ldrh	r3, [r1, #12]
 80040ce:	05db      	lsls	r3, r3, #23
 80040d0:	4605      	mov	r5, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	4616      	mov	r6, r2
 80040d6:	d505      	bpl.n	80040e4 <__swrite+0x1e>
 80040d8:	2302      	movs	r3, #2
 80040da:	2200      	movs	r2, #0
 80040dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e0:	f000 f868 	bl	80041b4 <_lseek_r>
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	4632      	mov	r2, r6
 80040f2:	463b      	mov	r3, r7
 80040f4:	4628      	mov	r0, r5
 80040f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040fa:	f000 b817 	b.w	800412c <_write_r>

080040fe <__sseek>:
 80040fe:	b510      	push	{r4, lr}
 8004100:	460c      	mov	r4, r1
 8004102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004106:	f000 f855 	bl	80041b4 <_lseek_r>
 800410a:	1c43      	adds	r3, r0, #1
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	bf15      	itete	ne
 8004110:	6560      	strne	r0, [r4, #84]	; 0x54
 8004112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800411a:	81a3      	strheq	r3, [r4, #12]
 800411c:	bf18      	it	ne
 800411e:	81a3      	strhne	r3, [r4, #12]
 8004120:	bd10      	pop	{r4, pc}

08004122 <__sclose>:
 8004122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004126:	f000 b813 	b.w	8004150 <_close_r>
	...

0800412c <_write_r>:
 800412c:	b538      	push	{r3, r4, r5, lr}
 800412e:	4c07      	ldr	r4, [pc, #28]	; (800414c <_write_r+0x20>)
 8004130:	4605      	mov	r5, r0
 8004132:	4608      	mov	r0, r1
 8004134:	4611      	mov	r1, r2
 8004136:	2200      	movs	r2, #0
 8004138:	6022      	str	r2, [r4, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	f7fc fc35 	bl	80009aa <_write>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_write_r+0x1e>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	b103      	cbz	r3, 800414a <_write_r+0x1e>
 8004148:	602b      	str	r3, [r5, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	20000168 	.word	0x20000168

08004150 <_close_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4c06      	ldr	r4, [pc, #24]	; (800416c <_close_r+0x1c>)
 8004154:	2300      	movs	r3, #0
 8004156:	4605      	mov	r5, r0
 8004158:	4608      	mov	r0, r1
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	f7fc fc41 	bl	80009e2 <_close>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d102      	bne.n	800416a <_close_r+0x1a>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	b103      	cbz	r3, 800416a <_close_r+0x1a>
 8004168:	602b      	str	r3, [r5, #0]
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	20000168 	.word	0x20000168

08004170 <_fstat_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4c07      	ldr	r4, [pc, #28]	; (8004190 <_fstat_r+0x20>)
 8004174:	2300      	movs	r3, #0
 8004176:	4605      	mov	r5, r0
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	f7fc fc3c 	bl	80009fa <_fstat>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d102      	bne.n	800418c <_fstat_r+0x1c>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	b103      	cbz	r3, 800418c <_fstat_r+0x1c>
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop
 8004190:	20000168 	.word	0x20000168

08004194 <_isatty_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4c06      	ldr	r4, [pc, #24]	; (80041b0 <_isatty_r+0x1c>)
 8004198:	2300      	movs	r3, #0
 800419a:	4605      	mov	r5, r0
 800419c:	4608      	mov	r0, r1
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	f7fc fc3b 	bl	8000a1a <_isatty>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_isatty_r+0x1a>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_isatty_r+0x1a>
 80041ac:	602b      	str	r3, [r5, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	20000168 	.word	0x20000168

080041b4 <_lseek_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4c07      	ldr	r4, [pc, #28]	; (80041d4 <_lseek_r+0x20>)
 80041b8:	4605      	mov	r5, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	6022      	str	r2, [r4, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fc fc34 	bl	8000a30 <_lseek>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_lseek_r+0x1e>
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_lseek_r+0x1e>
 80041d0:	602b      	str	r3, [r5, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000168 	.word	0x20000168

080041d8 <__malloc_lock>:
 80041d8:	4770      	bx	lr

080041da <__malloc_unlock>:
 80041da:	4770      	bx	lr

080041dc <_read_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4c07      	ldr	r4, [pc, #28]	; (80041fc <_read_r+0x20>)
 80041e0:	4605      	mov	r5, r0
 80041e2:	4608      	mov	r0, r1
 80041e4:	4611      	mov	r1, r2
 80041e6:	2200      	movs	r2, #0
 80041e8:	6022      	str	r2, [r4, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f7fc fbc0 	bl	8000970 <_read>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_read_r+0x1e>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_read_r+0x1e>
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	20000168 	.word	0x20000168

08004200 <_init>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr

0800420c <_fini>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr
